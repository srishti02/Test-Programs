//-------------------------------------------------------------------------------------------------
// *** f8c generated file: DO NOT EDIT! Created: 2017-07-20 11:48:49 ***
//-------------------------------------------------------------------------------------------------
/*

Fix8 is released under the GNU LESSER GENERAL PUBLIC LICENSE Version 3.

Fix8 Open Source FIX Engine.
Copyright (C) 2010-17 David L. Dight <fix@fix8.org>

Fix8 is free software: you can  redistribute it and / or modify  it under the  terms of the
GNU Lesser General  Public License as  published  by the Free  Software Foundation,  either
version 3 of the License, or (at your option) any later version.

Fix8 is distributed in the hope  that it will be useful, but WITHOUT ANY WARRANTY;  without
even the  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

You should  have received a copy of the GNU Lesser General Public  License along with Fix8.
If not, see <http://www.gnu.org/licenses/>.

*******************************************************************************************
*                Special note for Fix8 compiler generated source code                     *
*                                                                                         *
* Binary works  that are the results of compilation of code that is generated by the Fix8 *
* compiler  can be released  without releasing your  source code as  long as your  binary *
* links dynamically  against an  unmodified version of the Fix8 library.  You are however *
* required to leave the copyright text in the generated code.                             *
*                                                                                         *
*******************************************************************************************

BECAUSE THE PROGRAM IS  LICENSED FREE OF  CHARGE, THERE IS NO  WARRANTY FOR THE PROGRAM, TO
THE EXTENT  PERMITTED  BY  APPLICABLE  LAW.  EXCEPT WHEN  OTHERWISE  STATED IN  WRITING THE
COPYRIGHT HOLDERS AND/OR OTHER PARTIES  PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY
KIND,  EITHER EXPRESSED   OR   IMPLIED,  INCLUDING,  BUT   NOT  LIMITED   TO,  THE  IMPLIED
WARRANTIES  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO
THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE,
YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

IN NO EVENT UNLESS REQUIRED  BY APPLICABLE LAW  OR AGREED TO IN  WRITING WILL ANY COPYRIGHT
HOLDER, OR  ANY OTHER PARTY  WHO MAY MODIFY  AND/OR REDISTRIBUTE  THE PROGRAM AS  PERMITTED
ABOVE,  BE  LIABLE  TO  YOU  FOR  DAMAGES,  INCLUDING  ANY  GENERAL, SPECIAL, INCIDENTAL OR
CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT
NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR
THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH
HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

*/

//-------------------------------------------------------------------------------------------------
#include <fix8/f8config.h>
#if defined FIX8_MAGIC_NUM && FIX8_MAGIC_NUM > 16789508L
#error SERVER_classes.hpp version 1.3.4 is out of date. Please regenerate with f8c.
#endif
//-------------------------------------------------------------------------------------------------
// SERVER_classes.hpp
//-------------------------------------------------------------------------------------------------
#ifndef FIX8_45534D5F636C61737365732E687070_
#define FIX8_45534D5F636C61737365732E687070_

#if defined(_MSC_VER) && defined(F8_SERVER_API_SHARED)
    #if defined(BUILD_F8_SERVER_API)
        #define F8_SERVER_API __declspec(dllexport)
    #else
        #define F8_SERVER_API __declspec(dllimport)
    #endif
#else
    #define F8_SERVER_API
#endif
namespace FIX8 {

extern "C"
{
   F8_SERVER_API const F8MetaCntx& SERVER_ctx();
}

namespace SERVER {

//-------------------------------------------------------------------------------------------------
using SERVER_BaseMsgEntry = MsgTable;
/// Compiler generated metadata object, accessed through this function.
F8_SERVER_API const F8MetaCntx& ctx();
class SERVER_Router;

//-------------------------------------------------------------------------------------------------
/// Heartbeat (0), admin, 1 field, 0 groups.
class Heartbeat : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 1;

public:
   explicit Heartbeat(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}
   ~Heartbeat() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }
   bool is_admin() const { return true; }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// TestRequest (1), admin, 1 field, 0 groups.
class TestRequest : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 1;

public:
   explicit TestRequest(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}
   ~TestRequest() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }
   bool is_admin() const { return true; }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// ResendRequest (2), admin, 2 fields, 0 groups.
class ResendRequest : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 2;

public:
   explicit ResendRequest(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}
   ~ResendRequest() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }
   bool is_admin() const { return true; }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// Reject (3), admin, 7 fields, 0 groups.
class Reject : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 7;

public:
   explicit Reject(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}
   ~Reject() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }
   bool is_admin() const { return true; }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// SequenceReset (4), admin, 2 fields, 0 groups.
class SequenceReset : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 2;

public:
   explicit SequenceReset(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}
   ~SequenceReset() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }
   bool is_admin() const { return true; }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// Logout (5), admin, 3 fields, 0 groups.
class Logout : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 3;

public:
   explicit Logout(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}
   ~Logout() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }
   bool is_admin() const { return true; }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// IndicationofInterest (6), application, 38 fields, 2 groups.
class IndicationofInterest : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 38;

public:
   explicit IndicationofInterest(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 199, new NoIOIQualifiers },
            { 215, new NoRoutingIDs },
         });
   }
   ~IndicationofInterest() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 199: return new NoIOIQualifiers;
      case 215: return new NoRoutingIDs;
      default: return nullptr;
      }
   }

   /// NoIOIQualifiers (199), application, 1 field, 0 groups, is unique, hash: 0x80001869
   // IndicationofInterest::NoIOIQualifiers
   class NoIOIQualifiers : public GroupBase // depth: 1
   {
      static F8_SERVER_API const FieldTrait _traits[];
      static F8_SERVER_API const FieldTrait_Hash_Array _ftha;
      static F8_SERVER_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 1;

   public:
      enum { _fnum = 199 };

      NoIOIQualifiers() : GroupBase(_fnum) {}
      ~NoIOIQualifiers() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoRoutingIDs (215), application, 2 fields, 0 groups, shares static data, hash: 0x23183d17
   // IndicationofInterest::NoRoutingIDs
   class NoRoutingIDs : public GroupBase // depth: 1
   {
      static F8_SERVER_API const FieldTrait *_traits;
      static F8_SERVER_API const FieldTrait_Hash_Array& _ftha;
      static F8_SERVER_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 215 };

      NoRoutingIDs() : GroupBase(_fnum) {}
      ~NoRoutingIDs() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// Advertisement (7), application, 34 fields, 0 groups.
class Advertisement : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 34;

public:
   explicit Advertisement(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}
   ~Advertisement() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// ExecutionReport (8), application, 93 fields, 1 group.
class ExecutionReport : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 93;

public:
   explicit ExecutionReport(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({382, new NoContraBrokers });
   }
   ~ExecutionReport() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
      { return fnum == 382 ? new NoContraBrokers : nullptr; }

   /// NoContraBrokers (382), application, 4 fields, 0 groups, is unique, hash: 0x2e9fd64b
   // ExecutionReport::NoContraBrokers
   class NoContraBrokers : public GroupBase // depth: 1
   {
      static F8_SERVER_API const FieldTrait _traits[];
      static F8_SERVER_API const FieldTrait_Hash_Array _ftha;
      static F8_SERVER_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 382 };

      NoContraBrokers() : GroupBase(_fnum) {}
      ~NoContraBrokers() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// OrderCancelReject (9), application, 15 fields, 0 groups.
class OrderCancelReject : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 15;

public:
   explicit OrderCancelReject(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}
   ~OrderCancelReject() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// Logon (A), admin, 7 fields, 1 group.
class Logon : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 7;

public:
   explicit Logon(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({384, new NoMsgTypes });
   }
   ~Logon() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }
   bool is_admin() const { return true; }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
      { return fnum == 384 ? new NoMsgTypes : nullptr; }

   /// NoMsgTypes (384), application, 2 fields, 0 groups, is unique, hash: 0x232d8808
   // Logon::NoMsgTypes
   class NoMsgTypes : public GroupBase // depth: 1
   {
      static F8_SERVER_API const FieldTrait _traits[];
      static F8_SERVER_API const FieldTrait_Hash_Array _ftha;
      static F8_SERVER_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 384 };

      NoMsgTypes() : GroupBase(_fnum) {}
      ~NoMsgTypes() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// News (B), application, 11 fields, 3 groups.
class News : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 11;

public:
   explicit News(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 33, new LinesOfText },
            { 146, new NoRelatedSym },
            { 215, new NoRoutingIDs },
         });
   }
   ~News() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 33: return new LinesOfText;
      case 146: return new NoRelatedSym;
      case 215: return new NoRoutingIDs;
      default: return nullptr;
      }
   }

   /// LinesOfText (33), application, 3 fields, 0 groups, shares static data, hash: 0x474fa799
   // News::LinesOfText
   class LinesOfText : public GroupBase // depth: 1
   {
      static F8_SERVER_API const FieldTrait *_traits;
      static F8_SERVER_API const FieldTrait_Hash_Array& _ftha;
      static F8_SERVER_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 3;

   public:
      enum { _fnum = 33 };

      LinesOfText() : GroupBase(_fnum) {}
      ~LinesOfText() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoRelatedSym (146), application, 19 fields, 0 groups, shares static data, hash: 0x959cf8e4
   // News::NoRelatedSym
   class NoRelatedSym : public GroupBase // depth: 1
   {
      static F8_SERVER_API const FieldTrait *_traits;
      static F8_SERVER_API const FieldTrait_Hash_Array& _ftha;
      static F8_SERVER_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 19;

   public:
      enum { _fnum = 146 };

      NoRelatedSym() : GroupBase(_fnum) {}
      ~NoRelatedSym() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoRoutingIDs (215), application, 2 fields, 0 groups, shares static data, hash: 0x23183d17
   // News::NoRoutingIDs
   class NoRoutingIDs : public GroupBase // depth: 1
   {
      static F8_SERVER_API const FieldTrait *_traits;
      static F8_SERVER_API const FieldTrait_Hash_Array& _ftha;
      static F8_SERVER_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 215 };

      NoRoutingIDs() : GroupBase(_fnum) {}
      ~NoRoutingIDs() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// Email (C), application, 13 fields, 3 groups.
class Email : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 13;

public:
   explicit Email(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 33, new LinesOfText },
            { 146, new NoRelatedSym },
            { 215, new NoRoutingIDs },
         });
   }
   ~Email() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 33: return new LinesOfText;
      case 146: return new NoRelatedSym;
      case 215: return new NoRoutingIDs;
      default: return nullptr;
      }
   }

   /// LinesOfText (33), application, 3 fields, 0 groups, shares static data, hash: 0x474fa799
   // Email::LinesOfText
   class LinesOfText : public GroupBase // depth: 1
   {
      static F8_SERVER_API const FieldTrait *_traits;
      static F8_SERVER_API const FieldTrait_Hash_Array& _ftha;
      static F8_SERVER_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 3;

   public:
      enum { _fnum = 33 };

      LinesOfText() : GroupBase(_fnum) {}
      ~LinesOfText() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoRelatedSym (146), application, 19 fields, 0 groups, shares static data, hash: 0x959cf8e4
   // Email::NoRelatedSym
   class NoRelatedSym : public GroupBase // depth: 1
   {
      static F8_SERVER_API const FieldTrait *_traits;
      static F8_SERVER_API const FieldTrait_Hash_Array& _ftha;
      static F8_SERVER_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 19;

   public:
      enum { _fnum = 146 };

      NoRelatedSym() : GroupBase(_fnum) {}
      ~NoRelatedSym() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoRoutingIDs (215), application, 2 fields, 0 groups, shares static data, hash: 0x23183d17
   // Email::NoRoutingIDs
   class NoRoutingIDs : public GroupBase // depth: 1
   {
      static F8_SERVER_API const FieldTrait *_traits;
      static F8_SERVER_API const FieldTrait_Hash_Array& _ftha;
      static F8_SERVER_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 215 };

      NoRoutingIDs() : GroupBase(_fnum) {}
      ~NoRoutingIDs() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// NewOrderSingle (D), application, 71 fields, 2 groups.
class NewOrderSingle : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 71;

public:
   explicit NewOrderSingle(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 78, new NoAllocs },
            { 386, new NoTradingSessions },
         });
   }
   ~NewOrderSingle() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 78: return new NoAllocs;
      case 386: return new NoTradingSessions;
      default: return nullptr;
      }
   }

   /// NoAllocs (78), application, 2 fields, 0 groups, shares static data, hash: 0x230acfcc
   // NewOrderSingle::NoAllocs
   class NoAllocs : public GroupBase // depth: 1
   {
      static F8_SERVER_API const FieldTrait *_traits;
      static F8_SERVER_API const FieldTrait_Hash_Array& _ftha;
      static F8_SERVER_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 78 };

      NoAllocs() : GroupBase(_fnum) {}
      ~NoAllocs() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoTradingSessions (386), application, 1 field, 0 groups, shares static data, hash: 0x80001951
   // NewOrderSingle::NoTradingSessions
   class NoTradingSessions : public GroupBase // depth: 1
   {
      static F8_SERVER_API const FieldTrait *_traits;
      static F8_SERVER_API const FieldTrait_Hash_Array& _ftha;
      static F8_SERVER_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 1;

   public:
      enum { _fnum = 386 };

      NoTradingSessions() : GroupBase(_fnum) {}
      ~NoTradingSessions() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// NewOrderList (E), application, 12 fields, 1 group.
class NewOrderList : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 12;

public:
   explicit NewOrderList(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({73, new NoOrders });
   }
   ~NewOrderList() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
      { return fnum == 73 ? new NoOrders : nullptr; }

   /// NoOrders (73), application, 74 fields, 2 groups, is unique, hash: 0x6ff70a92
   // NewOrderList::NoOrders
   class NoOrders : public GroupBase // depth: 1
   {
      static F8_SERVER_API const FieldTrait _traits[];
      static F8_SERVER_API const FieldTrait_Hash_Array _ftha;
      static F8_SERVER_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 74;

   public:
      enum { _fnum = 73 };

      NoOrders() : GroupBase(_fnum) {}
      ~NoOrders() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({
               { 78, new NoAllocs },
               { 386, new NoTradingSessions },
            });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
      {
         switch(fnum)
         {
         case 78: return new NoAllocs;
         case 386: return new NoTradingSessions;
         default: return nullptr;
         }
      }

      /// NoAllocs (78), application, 2 fields, 0 groups, shares static data, hash: 0x230acfcc
      // NewOrderList::NoOrders::NoAllocs
      class NoAllocs : public GroupBase // depth: 2
      {
         static F8_SERVER_API const FieldTrait *_traits;
         static F8_SERVER_API const FieldTrait_Hash_Array& _ftha;
         static F8_SERVER_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 2;

      public:
         enum { _fnum = 78 };

         NoAllocs() : GroupBase(_fnum) {}
         ~NoAllocs() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };

      /// NoTradingSessions (386), application, 1 field, 0 groups, shares static data, hash: 0x80001951
      // NewOrderList::NoOrders::NoTradingSessions
      class NoTradingSessions : public GroupBase // depth: 2
      {
         static F8_SERVER_API const FieldTrait *_traits;
         static F8_SERVER_API const FieldTrait_Hash_Array& _ftha;
         static F8_SERVER_API const MsgType& _msgtype;
         static const unsigned _fieldcnt = 1;

      public:
         enum { _fnum = 386 };

         NoTradingSessions() : GroupBase(_fnum) {}
         ~NoTradingSessions() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// OrderCancelRequest (F), application, 36 fields, 0 groups.
class OrderCancelRequest : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 36;

public:
   explicit OrderCancelRequest(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}
   ~OrderCancelRequest() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// OrderCancelReplaceRequest (G), application, 71 fields, 2 groups.
class OrderCancelReplaceRequest : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 71;

public:
   explicit OrderCancelReplaceRequest(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 78, new NoAllocs },
            { 386, new NoTradingSessions },
         });
   }
   ~OrderCancelReplaceRequest() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 78: return new NoAllocs;
      case 386: return new NoTradingSessions;
      default: return nullptr;
      }
   }

   /// NoAllocs (78), application, 2 fields, 0 groups, shares static data, hash: 0x230acfcc
   // OrderCancelReplaceRequest::NoAllocs
   class NoAllocs : public GroupBase // depth: 1
   {
      static F8_SERVER_API const FieldTrait *_traits;
      static F8_SERVER_API const FieldTrait_Hash_Array& _ftha;
      static F8_SERVER_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 2;

   public:
      enum { _fnum = 78 };

      NoAllocs() : GroupBase(_fnum) {}
      ~NoAllocs() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoTradingSessions (386), application, 1 field, 0 groups, shares static data, hash: 0x80001951
   // OrderCancelReplaceRequest::NoTradingSessions
   class NoTradingSessions : public GroupBase // depth: 1
   {
      static F8_SERVER_API const FieldTrait *_traits;
      static F8_SERVER_API const FieldTrait_Hash_Array& _ftha;
      static F8_SERVER_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 1;

   public:
      enum { _fnum = 386 };

      NoTradingSessions() : GroupBase(_fnum) {}
      ~NoTradingSessions() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// OrderStatusRequest (H), application, 25 fields, 0 groups.
class OrderStatusRequest : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 25;

public:
   explicit OrderStatusRequest(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}
   ~OrderStatusRequest() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// Allocation (J), application, 46 fields, 3 groups.
class Allocation : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 46;

public:
   explicit Allocation(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 73, new NoOrders },
            { 78, new NoAllocs },
            { 124, new NoExecs },
         });
   }
   ~Allocation() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 73: return new NoOrders;
      case 78: return new NoAllocs;
      case 124: return new NoExecs;
      default: return nullptr;
      }
   }

   /// NoOrders (73), application, 5 fields, 0 groups, is unique, hash: 0xe6d202f6
   // Allocation::NoOrders
   class NoOrders : public GroupBase // depth: 1
   {
      static F8_SERVER_API const FieldTrait _traits[];
      static F8_SERVER_API const FieldTrait_Hash_Array _ftha;
      static F8_SERVER_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 5;

   public:
      enum { _fnum = 73 };

      NoOrders() : GroupBase(_fnum) {}
      ~NoOrders() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoAllocs (78), application, 23 fields, 1 group, is unique, hash: 0xd3ba6e81
   // Allocation::NoAllocs
   class NoAllocs : public GroupBase // depth: 1
   {
      static F8_SERVER_API const FieldTrait _traits[];
      static F8_SERVER_API const FieldTrait_Hash_Array _ftha;
      static F8_SERVER_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 23;

   public:
      enum { _fnum = 78 };

      NoAllocs() : GroupBase(_fnum) {}
      ~NoAllocs() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({136, new NoMiscFees });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 136 ? new NoMiscFees : nullptr; }

      /// NoMiscFees (136), application, 3 fields, 0 groups, is unique, hash: 0x8b704e43
      // Allocation::NoAllocs::NoMiscFees
      class NoMiscFees : public GroupBase // depth: 2
      {
         static F8_SERVER_API const FieldTrait _traits[];
         static F8_SERVER_API const FieldTrait_Hash_Array _ftha;
         static F8_SERVER_API const MsgType _msgtype;
         static const unsigned _fieldcnt = 3;

      public:
         enum { _fnum = 136 };

         NoMiscFees() : GroupBase(_fnum) {}
         ~NoMiscFees() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };

   /// NoExecs (124), application, 4 fields, 0 groups, is unique, hash: 0x2621f1b0
   // Allocation::NoExecs
   class NoExecs : public GroupBase // depth: 1
   {
      static F8_SERVER_API const FieldTrait _traits[];
      static F8_SERVER_API const FieldTrait_Hash_Array _ftha;
      static F8_SERVER_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 4;

   public:
      enum { _fnum = 124 };

      NoExecs() : GroupBase(_fnum) {}
      ~NoExecs() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// ListCancelRequest (K), application, 5 fields, 0 groups.
class ListCancelRequest : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 5;

public:
   explicit ListCancelRequest(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}
   ~ListCancelRequest() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// ListExecute (L), application, 7 fields, 0 groups.
class ListExecute : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 7;

public:
   explicit ListExecute(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}
   ~ListExecute() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// ListStatusRequest (M), application, 4 fields, 0 groups.
class ListStatusRequest : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 4;

public:
   explicit ListStatusRequest(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}
   ~ListStatusRequest() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// ListStatus (N), application, 11 fields, 1 group.
class ListStatus : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 11;

public:
   explicit ListStatus(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({73, new NoOrders });
   }
   ~ListStatus() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
      { return fnum == 73 ? new NoOrders : nullptr; }

   /// NoOrders (73), application, 10 fields, 0 groups, is unique, hash: 0xd62ee478
   // ListStatus::NoOrders
   class NoOrders : public GroupBase // depth: 1
   {
      static F8_SERVER_API const FieldTrait _traits[];
      static F8_SERVER_API const FieldTrait_Hash_Array _ftha;
      static F8_SERVER_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 10;

   public:
      enum { _fnum = 73 };

      NoOrders() : GroupBase(_fnum) {}
      ~NoOrders() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// AllocationACK (P), application, 10 fields, 0 groups.
class AllocationACK : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 10;

public:
   explicit AllocationACK(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}
   ~AllocationACK() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// DontKnowTrade (Q), application, 30 fields, 0 groups.
class DontKnowTrade : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 30;

public:
   explicit DontKnowTrade(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}
   ~DontKnowTrade() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// QuoteRequest (R), application, 2 fields, 1 group.
class QuoteRequest : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 2;

public:
   explicit QuoteRequest(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({146, new NoRelatedSym });
   }
   ~QuoteRequest() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
      { return fnum == 146 ? new NoRelatedSym : nullptr; }

   /// NoRelatedSym (146), application, 31 fields, 0 groups, is unique, hash: 0xa885e88d
   // QuoteRequest::NoRelatedSym
   class NoRelatedSym : public GroupBase // depth: 1
   {
      static F8_SERVER_API const FieldTrait _traits[];
      static F8_SERVER_API const FieldTrait_Hash_Array _ftha;
      static F8_SERVER_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 31;

   public:
      enum { _fnum = 146 };

      NoRelatedSym() : GroupBase(_fnum) {}
      ~NoRelatedSym() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// Quote (S), application, 38 fields, 0 groups.
class Quote : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 38;

public:
   explicit Quote(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}
   ~Quote() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// SettlementInstructions (T), application, 36 fields, 0 groups.
class SettlementInstructions : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 36;

public:
   explicit SettlementInstructions(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}
   ~SettlementInstructions() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// MarketDataRequest (V), application, 7 fields, 2 groups.
class MarketDataRequest : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 7;

public:
   explicit MarketDataRequest(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 146, new NoRelatedSym },
            { 267, new NoMDEntryTypes },
         });
   }
   ~MarketDataRequest() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 146: return new NoRelatedSym;
      case 267: return new NoMDEntryTypes;
      default: return nullptr;
      }
   }

   /// NoRelatedSym (146), application, 20 fields, 0 groups, is unique, hash: 0xd0cd82f5
   // MarketDataRequest::NoRelatedSym
   class NoRelatedSym : public GroupBase // depth: 1
   {
      static F8_SERVER_API const FieldTrait _traits[];
      static F8_SERVER_API const FieldTrait_Hash_Array _ftha;
      static F8_SERVER_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 20;

   public:
      enum { _fnum = 146 };

      NoRelatedSym() : GroupBase(_fnum) {}
      ~NoRelatedSym() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoMDEntryTypes (267), application, 1 field, 0 groups, is unique, hash: 0x8000190c
   // MarketDataRequest::NoMDEntryTypes
   class NoMDEntryTypes : public GroupBase // depth: 1
   {
      static F8_SERVER_API const FieldTrait _traits[];
      static F8_SERVER_API const FieldTrait_Hash_Array _ftha;
      static F8_SERVER_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 1;

   public:
      enum { _fnum = 267 };

      NoMDEntryTypes() : GroupBase(_fnum) {}
      ~NoMDEntryTypes() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// MarketDataSnapshotFullRefresh (W), application, 24 fields, 1 group.
class MarketDataSnapshotFullRefresh : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 24;

public:
   explicit MarketDataSnapshotFullRefresh(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({268, new NoMDEntries });
   }
   ~MarketDataSnapshotFullRefresh() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
      { return fnum == 268 ? new NoMDEntries : nullptr; }

   /// NoMDEntries (268), application, 30 fields, 0 groups, is unique, hash: 0xe96d6013
   // MarketDataSnapshotFullRefresh::NoMDEntries
   class NoMDEntries : public GroupBase // depth: 1
   {
      static F8_SERVER_API const FieldTrait _traits[];
      static F8_SERVER_API const FieldTrait_Hash_Array _ftha;
      static F8_SERVER_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 30;

   public:
      enum { _fnum = 268 };

      NoMDEntries() : GroupBase(_fnum) {}
      ~NoMDEntries() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// MarketDataIncrementalRefresh (X), application, 2 fields, 1 group.
class MarketDataIncrementalRefresh : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 2;

public:
   explicit MarketDataIncrementalRefresh(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({268, new NoMDEntries });
   }
   ~MarketDataIncrementalRefresh() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
      { return fnum == 268 ? new NoMDEntries : nullptr; }

   /// NoMDEntries (268), application, 56 fields, 0 groups, is unique, hash: 0x511aad2a
   // MarketDataIncrementalRefresh::NoMDEntries
   class NoMDEntries : public GroupBase // depth: 1
   {
      static F8_SERVER_API const FieldTrait _traits[];
      static F8_SERVER_API const FieldTrait_Hash_Array _ftha;
      static F8_SERVER_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 56;

   public:
      enum { _fnum = 268 };

      NoMDEntries() : GroupBase(_fnum) {}
      ~NoMDEntries() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// MarketDataRequestReject (Y), application, 5 fields, 0 groups.
class MarketDataRequestReject : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 5;

public:
   explicit MarketDataRequestReject(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}
   ~MarketDataRequestReject() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// QuoteCancel (Z), application, 6 fields, 1 group.
class QuoteCancel : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 6;

public:
   explicit QuoteCancel(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({295, new NoQuoteEntries });
   }
   ~QuoteCancel() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
      { return fnum == 295 ? new NoQuoteEntries : nullptr; }

   /// NoQuoteEntries (295), application, 20 fields, 0 groups, is unique, hash: 0x671df2c3
   // QuoteCancel::NoQuoteEntries
   class NoQuoteEntries : public GroupBase // depth: 1
   {
      static F8_SERVER_API const FieldTrait _traits[];
      static F8_SERVER_API const FieldTrait_Hash_Array _ftha;
      static F8_SERVER_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 20;

   public:
      enum { _fnum = 295 };

      NoQuoteEntries() : GroupBase(_fnum) {}
      ~NoQuoteEntries() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// QuoteStatusRequest (a), application, 22 fields, 0 groups.
class QuoteStatusRequest : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 22;

public:
   explicit QuoteStatusRequest(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}
   ~QuoteStatusRequest() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// QuoteAcknowledgement (b), application, 8 fields, 1 group.
class QuoteAcknowledgement : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 8;

public:
   explicit QuoteAcknowledgement(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({296, new NoQuoteSets });
   }
   ~QuoteAcknowledgement() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
      { return fnum == 296 ? new NoQuoteSets : nullptr; }

   /// NoQuoteSets (296), application, 22 fields, 1 group, is unique, hash: 0xfcf27046
   // QuoteAcknowledgement::NoQuoteSets
   class NoQuoteSets : public GroupBase // depth: 1
   {
      static F8_SERVER_API const FieldTrait _traits[];
      static F8_SERVER_API const FieldTrait_Hash_Array _ftha;
      static F8_SERVER_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 22;

   public:
      enum { _fnum = 296 };

      NoQuoteSets() : GroupBase(_fnum) {}
      ~NoQuoteSets() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({295, new NoQuoteEntries });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 295 ? new NoQuoteEntries : nullptr; }

      /// NoQuoteEntries (295), application, 21 fields, 0 groups, is unique, hash: 0x582f4433
      // QuoteAcknowledgement::NoQuoteSets::NoQuoteEntries
      class NoQuoteEntries : public GroupBase // depth: 2
      {
         static F8_SERVER_API const FieldTrait _traits[];
         static F8_SERVER_API const FieldTrait_Hash_Array _ftha;
         static F8_SERVER_API const MsgType _msgtype;
         static const unsigned _fieldcnt = 21;

      public:
         enum { _fnum = 295 };

         NoQuoteEntries() : GroupBase(_fnum) {}
         ~NoQuoteEntries() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// SecurityDefinitionRequest (c), application, 27 fields, 1 group.
class SecurityDefinitionRequest : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 27;

public:
   explicit SecurityDefinitionRequest(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({146, new NoRelatedSym });
   }
   ~SecurityDefinitionRequest() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
      { return fnum == 146 ? new NoRelatedSym : nullptr; }

   /// NoRelatedSym (146), application, 22 fields, 0 groups, shares static data, hash: 0x84624161
   // SecurityDefinitionRequest::NoRelatedSym
   class NoRelatedSym : public GroupBase // depth: 1
   {
      static F8_SERVER_API const FieldTrait *_traits;
      static F8_SERVER_API const FieldTrait_Hash_Array& _ftha;
      static F8_SERVER_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 22;

   public:
      enum { _fnum = 146 };

      NoRelatedSym() : GroupBase(_fnum) {}
      ~NoRelatedSym() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// SecurityDefinition (d), application, 29 fields, 1 group.
class SecurityDefinition : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 29;

public:
   explicit SecurityDefinition(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({146, new NoRelatedSym });
   }
   ~SecurityDefinition() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
      { return fnum == 146 ? new NoRelatedSym : nullptr; }

   /// NoRelatedSym (146), application, 22 fields, 0 groups, shares static data, hash: 0x84624161
   // SecurityDefinition::NoRelatedSym
   class NoRelatedSym : public GroupBase // depth: 1
   {
      static F8_SERVER_API const FieldTrait *_traits;
      static F8_SERVER_API const FieldTrait_Hash_Array& _ftha;
      static F8_SERVER_API const MsgType& _msgtype;
      static const unsigned _fieldcnt = 22;

   public:
      enum { _fnum = 146 };

      NoRelatedSym() : GroupBase(_fnum) {}
      ~NoRelatedSym() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// SecurityStatusRequest (e), application, 23 fields, 0 groups.
class SecurityStatusRequest : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 23;

public:
   explicit SecurityStatusRequest(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}
   ~SecurityStatusRequest() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// SecurityStatus (f), application, 36 fields, 0 groups.
class SecurityStatus : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 36;

public:
   explicit SecurityStatus(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}
   ~SecurityStatus() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// TradingSessionStatusRequest (g), application, 5 fields, 0 groups.
class TradingSessionStatusRequest : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 5;

public:
   explicit TradingSessionStatusRequest(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}
   ~TradingSessionStatusRequest() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// TradingSessionStatus (h), application, 15 fields, 0 groups.
class TradingSessionStatus : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 15;

public:
   explicit TradingSessionStatus(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}
   ~TradingSessionStatus() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// header (header), application, 27 fields, 0 groups.
class header : public MessageBase
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 27;

   begin_string *_begin_string;
   body_length *_body_length;
   msg_type *_msg_type;

public:
   explicit header(bool deepctor=true) : MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha),
      _begin_string(new begin_string(ctx()._beginStr)), _body_length(new body_length), _msg_type(new msg_type) { add_preamble(); }
   ~header() = default;

   static const MsgType& get_msgtype() { return _msgtype; }

	begin_string *get_begin_string() { return _begin_string; };
	body_length *get_body_length() { return _body_length; };
	msg_type *get_msg_type() { return _msg_type; };

	void add_preamble()
	{
		add_field(Common_BeginString, 1, _begin_string, false);
		add_field(Common_BodyLength, 2, _body_length, false);
		add_field(Common_MsgType, 3, _msg_type, false);
	}
};

//-------------------------------------------------------------------------------------------------
/// MassQuote (i), application, 6 fields, 1 group.
class MassQuote : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 6;

public:
   explicit MassQuote(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({296, new NoQuoteSets });
   }
   ~MassQuote() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
      { return fnum == 296 ? new NoQuoteSets : nullptr; }

   /// NoQuoteSets (296), application, 23 fields, 1 group, is unique, hash: 0x46553078
   // MassQuote::NoQuoteSets
   class NoQuoteSets : public GroupBase // depth: 1
   {
      static F8_SERVER_API const FieldTrait _traits[];
      static F8_SERVER_API const FieldTrait_Hash_Array _ftha;
      static F8_SERVER_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 23;

   public:
      enum { _fnum = 296 };

      NoQuoteSets() : GroupBase(_fnum) {}
      ~NoQuoteSets() = default;
      MessageBase *create_group(bool deepctor) const
      {
         MessageBase *mb(new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha));
         if (deepctor)
            mb->get_groups().insert({295, new NoQuoteEntries });
         return mb;
      }

      static const MsgType& get_msgtype() { return _msgtype; }

      GroupBase *create_nested_group(unsigned short fnum) const
         { return fnum == 295 ? new NoQuoteEntries : nullptr; }

      /// NoQuoteEntries (295), application, 36 fields, 0 groups, is unique, hash: 0x68d65a32
      // MassQuote::NoQuoteSets::NoQuoteEntries
      class NoQuoteEntries : public GroupBase // depth: 2
      {
         static F8_SERVER_API const FieldTrait _traits[];
         static F8_SERVER_API const FieldTrait_Hash_Array _ftha;
         static F8_SERVER_API const MsgType _msgtype;
         static const unsigned _fieldcnt = 36;

      public:
         enum { _fnum = 295 };

         NoQuoteEntries() : GroupBase(_fnum) {}
         ~NoQuoteEntries() = default;
         MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

         static const MsgType& get_msgtype() { return _msgtype; }
      };
   };
};

//-------------------------------------------------------------------------------------------------
/// BusinessMessageReject (j), application, 7 fields, 0 groups.
class BusinessMessageReject : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 7;

public:
   explicit BusinessMessageReject(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha) {}
   ~BusinessMessageReject() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
};

//-------------------------------------------------------------------------------------------------
/// BidRequest (k), application, 29 fields, 2 groups.
class BidRequest : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 29;

public:
   explicit BidRequest(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({
            { 398, new NoBidDescriptors },
            { 420, new NoBidComponents },
         });
   }
   ~BidRequest() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
   {
      switch(fnum)
      {
      case 398: return new NoBidDescriptors;
      case 420: return new NoBidComponents;
      default: return nullptr;
      }
   }

   /// NoBidDescriptors (398), application, 11 fields, 0 groups, is unique, hash: 0x80e3528e
   // BidRequest::NoBidDescriptors
   class NoBidDescriptors : public GroupBase // depth: 1
   {
      static F8_SERVER_API const FieldTrait _traits[];
      static F8_SERVER_API const FieldTrait_Hash_Array _ftha;
      static F8_SERVER_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 11;

   public:
      enum { _fnum = 398 };

      NoBidDescriptors() : GroupBase(_fnum) {}
      ~NoBidDescriptors() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };

   /// NoBidComponents (420), application, 7 fields, 0 groups, is unique, hash: 0xde24c5c6
   // BidRequest::NoBidComponents
   class NoBidComponents : public GroupBase // depth: 1
   {
      static F8_SERVER_API const FieldTrait _traits[];
      static F8_SERVER_API const FieldTrait_Hash_Array _ftha;
      static F8_SERVER_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 7;

   public:
      enum { _fnum = 420 };

      NoBidComponents() : GroupBase(_fnum) {}
      ~NoBidComponents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// BidResponse (l), application, 3 fields, 1 group.
class BidResponse : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 3;

public:
   explicit BidResponse(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({420, new NoBidComponents });
   }
   ~BidResponse() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
      { return fnum == 420 ? new NoBidComponents : nullptr; }

   /// NoBidComponents (420), application, 15 fields, 0 groups, is unique, hash: 0x3b3ae9df
   // BidResponse::NoBidComponents
   class NoBidComponents : public GroupBase // depth: 1
   {
      static F8_SERVER_API const FieldTrait _traits[];
      static F8_SERVER_API const FieldTrait_Hash_Array _ftha;
      static F8_SERVER_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 15;

   public:
      enum { _fnum = 420 };

      NoBidComponents() : GroupBase(_fnum) {}
      ~NoBidComponents() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// ListStrikePrice (m), application, 3 fields, 1 group.
class ListStrikePrice : public Message
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 3;

public:
   explicit ListStrikePrice(bool deepctor=true) : Message(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha)
   {
      if (deepctor)
         _groups.insert({428, new NoStrikes });
   }
   ~ListStrikePrice() = default;
   bool process(Router& rt) const { return (static_cast<SERVER_Router&>(rt))(this); }

   static const MsgType& get_msgtype() { return _msgtype; }
   GroupBase *create_nested_group(unsigned short fnum) const
      { return fnum == 428 ? new NoStrikes : nullptr; }

   /// NoStrikes (428), application, 27 fields, 0 groups, is unique, hash: 0x78a6667e
   // ListStrikePrice::NoStrikes
   class NoStrikes : public GroupBase // depth: 1
   {
      static F8_SERVER_API const FieldTrait _traits[];
      static F8_SERVER_API const FieldTrait_Hash_Array _ftha;
      static F8_SERVER_API const MsgType _msgtype;
      static const unsigned _fieldcnt = 27;

   public:
      enum { _fnum = 428 };

      NoStrikes() : GroupBase(_fnum) {}
      ~NoStrikes() = default;
      MessageBase *create_group(bool) const { return new MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha); }

      static const MsgType& get_msgtype() { return _msgtype; }
   };
};

//-------------------------------------------------------------------------------------------------
/// trailer (trailer), application, 3 fields, 0 groups.
class trailer : public MessageBase
{
   static F8_SERVER_API const FieldTrait _traits[];
   static F8_SERVER_API const FieldTrait_Hash_Array _ftha; 
   static F8_SERVER_API const MsgType _msgtype;
   static F8_SERVER_API const unsigned _fieldcnt = 3;

   check_sum *_check_sum;

public:
   explicit trailer(bool deepctor=true) : MessageBase(ctx(), _msgtype(), _traits, _fieldcnt, &_ftha),
      _check_sum(new check_sum) { add_preamble(); }
   ~trailer() = default;

   static const MsgType& get_msgtype() { return _msgtype; }

	check_sum *get_check_sum() { return _check_sum; };

	void add_preamble()
	{
		add_field(Common_CheckSum, 3, _check_sum, false);
	}
};

//-------------------------------------------------------------------------------------------------

} // namespace SERVER
} // namespace FIX8
#endif // FIX8_45534D5F636C61737365732E687070_
