//-------------------------------------------------------------------------------------------------
// *** f8c generated file: DO NOT EDIT! Created: 2017-07-20 11:48:49 ***
//-------------------------------------------------------------------------------------------------
/*

Fix8 is released under the GNU LESSER GENERAL PUBLIC LICENSE Version 3.

Fix8 Open Source FIX Engine.
Copyright (C) 2010-17 David L. Dight <fix@fix8.org>

Fix8 is free software: you can  redistribute it and / or modify  it under the  terms of the
GNU Lesser General  Public License as  published  by the Free  Software Foundation,  either
version 3 of the License, or (at your option) any later version.

Fix8 is distributed in the hope  that it will be useful, but WITHOUT ANY WARRANTY;  without
even the  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

You should  have received a copy of the GNU Lesser General Public  License along with Fix8.
If not, see <http://www.gnu.org/licenses/>.

*******************************************************************************************
*                Special note for Fix8 compiler generated source code                     *
*                                                                                         *
* Binary works  that are the results of compilation of code that is generated by the Fix8 *
* compiler  can be released  without releasing your  source code as  long as your  binary *
* links dynamically  against an  unmodified version of the Fix8 library.  You are however *
* required to leave the copyright text in the generated code.                             *
*                                                                                         *
*******************************************************************************************

BECAUSE THE PROGRAM IS  LICENSED FREE OF  CHARGE, THERE IS NO  WARRANTY FOR THE PROGRAM, TO
THE EXTENT  PERMITTED  BY  APPLICABLE  LAW.  EXCEPT WHEN  OTHERWISE  STATED IN  WRITING THE
COPYRIGHT HOLDERS AND/OR OTHER PARTIES  PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY
KIND,  EITHER EXPRESSED   OR   IMPLIED,  INCLUDING,  BUT   NOT  LIMITED   TO,  THE  IMPLIED
WARRANTIES  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO
THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE,
YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

IN NO EVENT UNLESS REQUIRED  BY APPLICABLE LAW  OR AGREED TO IN  WRITING WILL ANY COPYRIGHT
HOLDER, OR  ANY OTHER PARTY  WHO MAY MODIFY  AND/OR REDISTRIBUTE  THE PROGRAM AS  PERMITTED
ABOVE,  BE  LIABLE  TO  YOU  FOR  DAMAGES,  INCLUDING  ANY  GENERAL, SPECIAL, INCIDENTAL OR
CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT
NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR
THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH
HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

*/

//-------------------------------------------------------------------------------------------------
#include <fix8/f8config.h>
#if defined FIX8_MAGIC_NUM && FIX8_MAGIC_NUM > 16789508L
#error SERVER_types.hpp version 1.3.4 is out of date. Please regenerate with f8c.
#endif
//-------------------------------------------------------------------------------------------------
// SERVER_types.hpp
//-------------------------------------------------------------------------------------------------
#ifndef FIX8_45534D5F74797065732E687070_
#define FIX8_45534D5F74797065732E687070_

namespace FIX8 {
namespace SERVER {

//-------------------------------------------------------------------------------------------------
using Account = Field<f8String, 1>;
//-------------------------------------------------------------------------------------------------
using AdvId = Field<f8String, 2>;
//-------------------------------------------------------------------------------------------------
using AdvRefID = Field<f8String, 3>;
//-------------------------------------------------------------------------------------------------
using AdvSide = Field<char, 4>;
const char AdvSide_BUY('B');
const char AdvSide_SELL('S');
const char AdvSide_TRADE('T');
const char AdvSide_CROSS('X');
const size_t AdvSide_realm_els(4);
//-------------------------------------------------------------------------------------------------
using AdvTransType = Field<f8String, 5>;
const f8String AdvTransType_CANCEL("C");
const f8String AdvTransType_NEW("N");
const f8String AdvTransType_REPLACE("R");
const size_t AdvTransType_realm_els(3);
//-------------------------------------------------------------------------------------------------
using AvgPx = Field<price, 6>;
//-------------------------------------------------------------------------------------------------
using BeginSeqNo = Field<int, 7>;
//-------------------------------------------------------------------------------------------------
using BeginString = Field<f8String, 8>;
//-------------------------------------------------------------------------------------------------
using BodyLength = Field<int, 9>;
//-------------------------------------------------------------------------------------------------
using CheckSum = Field<f8String, 10>;
//-------------------------------------------------------------------------------------------------
using ClOrdID = Field<f8String, 11>;
//-------------------------------------------------------------------------------------------------
using Commission = Field<Amt, 12>;
//-------------------------------------------------------------------------------------------------
using CommType = Field<char, 13>;
const char CommType_PER_SHARE('1');
const char CommType_PERCENTAGE('2');
const char CommType_ABSOLUTE('3');
const size_t CommType_realm_els(3);
//-------------------------------------------------------------------------------------------------
using CumQty = Field<Qty, 14>;
//-------------------------------------------------------------------------------------------------
using Currency = Field<currency, 15>;
//-------------------------------------------------------------------------------------------------
using EndSeqNo = Field<int, 16>;
//-------------------------------------------------------------------------------------------------
using ExecID = Field<f8String, 17>;
//-------------------------------------------------------------------------------------------------
using ExecInst = Field<MultipleStringValue, 18>;
const f8String ExecInst_STAY_ON_OFFERSIDE("0");
const f8String ExecInst_NOT_HELD("1");
const f8String ExecInst_WORK("2");
const f8String ExecInst_GO_ALONG("3");
const f8String ExecInst_OVER_THE_DAY("4");
const f8String ExecInst_HELD("5");
const f8String ExecInst_PARTICIPATE_DONT_INITIATE("6");
const f8String ExecInst_STRICT_SCALE("7");
const f8String ExecInst_TRY_TO_SCALE("8");
const f8String ExecInst_STAY_ON_BIDSIDE("9");
const f8String ExecInst_NO_CROSS("A");
const f8String ExecInst_OK_TO_CROSS("B");
const f8String ExecInst_CALL_FIRST("C");
const f8String ExecInst_PERCENT_OF_VOLUME("D");
const f8String ExecInst_DO_NOT_INCREASE("E");
const f8String ExecInst_DO_NOT_REDUCE("F");
const f8String ExecInst_ALL_OR_NONE("G");
const f8String ExecInst_INSTITUTIONS_ONLY("I");
const f8String ExecInst_LAST_PEG("L");
const f8String ExecInst_MID_PRICE_PEG("M");
const f8String ExecInst_NON_NEGOTIABLE("N");
const f8String ExecInst_OPENING_PEG("O");
const f8String ExecInst_MARKET_PEG("P");
const f8String ExecInst_PRIMARY_PEG("R");
const f8String ExecInst_SUSPEND("S");
const f8String ExecInst_FIXED_PEG_TO_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_ORDER("T");
const f8String ExecInst_CUSTOMER_DISPLAY_INSTRUCTION("U");
const f8String ExecInst_NETTING("V");
const f8String ExecInst_PEG_TO_VWAP("W");
const size_t ExecInst_realm_els(29);
//-------------------------------------------------------------------------------------------------
using ExecRefID = Field<f8String, 19>;
//-------------------------------------------------------------------------------------------------
using ExecTransType = Field<char, 20>;
const char ExecTransType_NEW('0');
const char ExecTransType_CANCEL('1');
const char ExecTransType_CORRECT('2');
const char ExecTransType_STATUS('3');
const size_t ExecTransType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using HandlInst = Field<char, 21>;
const char HandlInst_AUTOMATED_EXECUTION_ORDER_PRIVATE_NO_BROKER_INTERVENTION('1');
const char HandlInst_AUTOMATED_EXECUTION_ORDER_PUBLIC_BROKER_INTERVENTION_OK('2');
const char HandlInst_MANUAL_ORDER_BEST_EXECUTION('3');
const size_t HandlInst_realm_els(3);
//-------------------------------------------------------------------------------------------------
using IDSource = Field<f8String, 22>;
const f8String IDSource_CUSIP("1");
const f8String IDSource_SEDOL("2");
const f8String IDSource_QUIK("3");
const f8String IDSource_ISIN_NUMBER("4");
const f8String IDSource_RIC_CODE("5");
const f8String IDSource_ISO_CURRENCY_CODE("6");
const f8String IDSource_ISO_COUNTRY_CODE("7");
const f8String IDSource_EXCHANGE_SYMBOL("8");
const f8String IDSource_CONSOLIDATED_TAPE_ASSOCIATION("9");
const size_t IDSource_realm_els(9);
//-------------------------------------------------------------------------------------------------
using IOIid = Field<f8String, 23>;
//-------------------------------------------------------------------------------------------------
using IOIQltyInd = Field<char, 25>;
const char IOIQltyInd_HIGH('H');
const char IOIQltyInd_LOW('L');
const char IOIQltyInd_MEDIUM('M');
const size_t IOIQltyInd_realm_els(3);
//-------------------------------------------------------------------------------------------------
using IOIRefID = Field<f8String, 26>;
//-------------------------------------------------------------------------------------------------
using IOIShares = Field<f8String, 27>;
const f8String IOIShares_LARGE("L");
const f8String IOIShares_MEDIUM("M");
const f8String IOIShares_SMALL("S");
const size_t IOIShares_realm_els(3);
//-------------------------------------------------------------------------------------------------
using IOITransType = Field<char, 28>;
const char IOITransType_CANCEL('C');
const char IOITransType_NEW('N');
const char IOITransType_REPLACE('R');
const size_t IOITransType_realm_els(3);
//-------------------------------------------------------------------------------------------------
using LastCapacity = Field<char, 29>;
const char LastCapacity_AGENT('1');
const char LastCapacity_CROSS_AS_AGENT('2');
const char LastCapacity_CROSS_AS_PRINCIPAL('3');
const char LastCapacity_PRINCIPAL('4');
const size_t LastCapacity_realm_els(4);
//-------------------------------------------------------------------------------------------------
using LastMkt = Field<Exchange, 30>;
//-------------------------------------------------------------------------------------------------
using LastPx = Field<price, 31>;
//-------------------------------------------------------------------------------------------------
using LastShares = Field<Qty, 32>;
//-------------------------------------------------------------------------------------------------
using LinesOfText = Field<int, 33>;
//-------------------------------------------------------------------------------------------------
using MsgSeqNum = Field<int, 34>;
//-------------------------------------------------------------------------------------------------
using MsgType = Field<f8String, 35>;
const f8String MsgType_HEARTBEAT("0");
const f8String MsgType_TEST_REQUEST("1");
const f8String MsgType_RESEND_REQUEST("2");
const f8String MsgType_REJECT("3");
const f8String MsgType_SEQUENCE_RESET("4");
const f8String MsgType_LOGOUT("5");
const f8String MsgType_INDICATION_OF_INTEREST("6");
const f8String MsgType_ADVERTISEMENT("7");
const f8String MsgType_EXECUTION_REPORT("8");
const f8String MsgType_ORDER_CANCEL_REJECT("9");
const f8String MsgType_LOGON("A");
const f8String MsgType_NEWS("B");
const f8String MsgType_EMAIL("C");
const f8String MsgType_ORDER_SINGLE("D");
const f8String MsgType_ORDER_LIST("E");
const f8String MsgType_ORDER_CANCEL_REQUEST("F");
const f8String MsgType_ORDER_CANCEL_REPLACE_REQUEST("G");
const f8String MsgType_ORDER_STATUS_REQUEST("H");
const f8String MsgType_ALLOCATION("J");
const f8String MsgType_LIST_CANCEL_REQUEST("K");
const f8String MsgType_LIST_EXECUTE("L");
const f8String MsgType_LIST_STATUS_REQUEST("M");
const f8String MsgType_LIST_STATUS("N");
const f8String MsgType_ALLOCATION_ACK("P");
const f8String MsgType_DONT_KNOW_TRADE("Q");
const f8String MsgType_QUOTE_REQUEST("R");
const f8String MsgType_QUOTE("S");
const f8String MsgType_SETTLEMENT_INSTRUCTIONS("T");
const f8String MsgType_MARKET_DATA_REQUEST("V");
const f8String MsgType_MARKET_DATA_SNAPSHOT_FULL_REFRESH("W");
const f8String MsgType_MARKET_DATA_INCREMENTAL_REFRESH("X");
const f8String MsgType_MARKET_DATA_REQUEST_REJECT("Y");
const f8String MsgType_QUOTE_CANCEL("Z");
const f8String MsgType_QUOTE_STATUS_REQUEST("a");
const f8String MsgType_QUOTE_ACKNOWLEDGEMENT("b");
const f8String MsgType_SECURITY_DEFINITION_REQUEST("c");
const f8String MsgType_SECURITY_DEFINITION("d");
const f8String MsgType_SECURITY_STATUS_REQUEST("e");
const f8String MsgType_SECURITY_STATUS("f");
const f8String MsgType_TRADING_SESSION_STATUS_REQUEST("g");
const f8String MsgType_TRADING_SESSION_STATUS("h");
const f8String MsgType_MASS_QUOTE("i");
const f8String MsgType_BUSINESS_MESSAGE_REJECT("j");
const f8String MsgType_BID_REQUEST("k");
const f8String MsgType_BID_RESPONSE("l");
const f8String MsgType_LIST_STRIKE_PRICE("m");
const size_t MsgType_realm_els(46);
//-------------------------------------------------------------------------------------------------
using NewSeqNo = Field<int, 36>;
//-------------------------------------------------------------------------------------------------
using OrderID = Field<f8String, 37>;
//-------------------------------------------------------------------------------------------------
using OrderQty = Field<Qty, 38>;
//-------------------------------------------------------------------------------------------------
using OrdStatus = Field<char, 39>;
const char OrdStatus_NEW('0');
const char OrdStatus_PARTIALLY_FILLED('1');
const char OrdStatus_FILLED('2');
const char OrdStatus_DONE_FOR_DAY('3');
const char OrdStatus_CANCELED('4');
const char OrdStatus_REPLACED('5');
const char OrdStatus_PENDING_CANCEL('6');
const char OrdStatus_STOPPED('7');
const char OrdStatus_REJECTED('8');
const char OrdStatus_SUSPENDED('9');
const char OrdStatus_PENDING_NEW('A');
const char OrdStatus_CALCULATED('B');
const char OrdStatus_EXPIRED('C');
const char OrdStatus_ACCEPTED_FOR_BIDDING('D');
const char OrdStatus_PENDING_REPLACE('E');
const char OrdStatus_UNCHANGED('U');
const size_t OrdStatus_realm_els(16);
//-------------------------------------------------------------------------------------------------
using OrdType = Field<char, 40>;
const char OrdType_MARKET('1');
const char OrdType_LIMIT('2');
const char OrdType_STOP('3');
const char OrdType_STOP_LIMIT('4');
const char OrdType_MARKET_ON_CLOSE('5');
const char OrdType_WITH_OR_WITHOUT('6');
const char OrdType_LIMIT_OR_BETTER('7');
const char OrdType_LIMIT_WITH_OR_WITHOUT('8');
const char OrdType_ON_BASIS('9');
const char OrdType_ON_CLOSE('A');
const char OrdType_LIMIT_ON_CLOSE('B');
const char OrdType_FOREX_C('C');
const char OrdType_PREVIOUSLY_QUOTED('D');
const char OrdType_PREVIOUSLY_INDICATED('E');
const char OrdType_FOREX_F('F');
const char OrdType_FOREX_G('G');
const char OrdType_FOREX_H('H');
const char OrdType_FUNARI('I');
const char OrdType_PEGGED('P');
const size_t OrdType_realm_els(19);
//-------------------------------------------------------------------------------------------------
using OrigClOrdID = Field<f8String, 41>;
//-------------------------------------------------------------------------------------------------
using OrigTime = Field<UTCTimestamp, 42>;
//-------------------------------------------------------------------------------------------------
using PossDupFlag = Field<Boolean, 43>;
const char PossDupFlag_NO('N');
const char PossDupFlag_YES('Y');
const size_t PossDupFlag_realm_els(2);
//-------------------------------------------------------------------------------------------------
using Price = Field<price, 44>;
//-------------------------------------------------------------------------------------------------
using RefSeqNum = Field<int, 45>;
//-------------------------------------------------------------------------------------------------
using RelatdSym = Field<f8String, 46>;
//-------------------------------------------------------------------------------------------------
using Rule80A = Field<char, 47>;
const char Rule80A_AGENCY_SINGLE_ORDER('A');
const char Rule80A_SHORT_EXEMPT_TRANSACTION_B('B');
const char Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_MEMBER_FIRM_ORG('C');
const char Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_MEMBER_FIRM_ORG('D');
const char Rule80A_REGISTERED_EQUITY_MARKET_MAKER_TRADES('E');
const char Rule80A_SHORT_EXEMPT_TRANSACTION_F('F');
const char Rule80A_SHORT_EXEMPT_TRANSACTION_H('H');
const char Rule80A_INDIVIDUAL_INVESTOR_SINGLE_ORDER('I');
const char Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_INDIVIDUAL_CUSTOMER('J');
const char Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_INDIVIDUAL_CUSTOMER('K');
const char Rule80A_SHORT_EXEMPT_TRANSACTION_FOR_MEMBER_COMPETING_MARKET_MAKER_AFFILIATED_WITH_THE_FIRM_CLEARING_THE_TRADE('L');
const char Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_OTHER_MEMBER('M');
const char Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_OTHER_MEMBER('N');
const char Rule80A_COMPETING_DEALER_TRADES_O('O');
const char Rule80A_PRINCIPAL('P');
const char Rule80A_COMPETING_DEALER_TRADES_R('R');
const char Rule80A_SPECIALIST_TRADES('S');
const char Rule80A_COMPETING_DEALER_TRADES_T('T');
const char Rule80A_PROGRAM_ORDER_INDEX_ARB_FOR_OTHER_AGENCY('U');
const char Rule80A_ALL_OTHER_ORDERS_AS_AGENT_FOR_OTHER_MEMBER('W');
const char Rule80A_SHORT_EXEMPT_TRANSACTION_FOR_MEMBER_COMPETING_MARKET_MAKER_NOT_AFFILIATED_WITH_THE_FIRM_CLEARING_THE_TRADE('X');
const char Rule80A_PROGRAM_ORDER_NON_INDEX_ARB_FOR_OTHER_AGENCY('Y');
const char Rule80A_SHORT_EXEMPT_TRANSACTION_FOR_NON_MEMBER_COMPETING_MARKET_MAKER('Z');
const size_t Rule80A_realm_els(23);
//-------------------------------------------------------------------------------------------------
using SecurityID = Field<f8String, 48>;
//-------------------------------------------------------------------------------------------------
using SenderCompID = Field<f8String, 49>;
//-------------------------------------------------------------------------------------------------
using SenderSubID = Field<f8String, 50>;
//-------------------------------------------------------------------------------------------------
using SendingTime = Field<UTCTimestamp, 52>;
//-------------------------------------------------------------------------------------------------
using Shares = Field<Qty, 53>;
//-------------------------------------------------------------------------------------------------
using Side = Field<char, 54>;
const char Side_BUY('1');
const char Side_SELL('2');
const char Side_BUY_MINUS('3');
const char Side_SELL_PLUS('4');
const char Side_SELL_SHORT('5');
const char Side_SELL_SHORT_EXEMPT('6');
const char Side_UNDISCLOSED('7');
const char Side_CROSS('8');
const char Side_CROSS_SHORT('9');
const size_t Side_realm_els(9);
//-------------------------------------------------------------------------------------------------
using Symbol = Field<f8String, 55>;
//-------------------------------------------------------------------------------------------------
using TargetCompID = Field<f8String, 56>;
//-------------------------------------------------------------------------------------------------
using TargetSubID = Field<f8String, 57>;
//-------------------------------------------------------------------------------------------------
using Text = Field<f8String, 58>;
//-------------------------------------------------------------------------------------------------
using TimeInForce = Field<char, 59>;
const char TimeInForce_DAY('0');
const char TimeInForce_GOOD_TILL_CANCEL('1');
const char TimeInForce_AT_THE_OPENING('2');
const char TimeInForce_IMMEDIATE_OR_CANCEL('3');
const char TimeInForce_FILL_OR_KILL('4');
const char TimeInForce_GOOD_TILL_CROSSING('5');
const char TimeInForce_GOOD_TILL_DATE('6');
const size_t TimeInForce_realm_els(7);
//-------------------------------------------------------------------------------------------------
using TransactTime = Field<UTCTimestamp, 60>;
//-------------------------------------------------------------------------------------------------
using Urgency = Field<char, 61>;
const char Urgency_NORMAL('0');
const char Urgency_FLASH('1');
const char Urgency_BACKGROUND('2');
const size_t Urgency_realm_els(3);
//-------------------------------------------------------------------------------------------------
using ValidUntilTime = Field<UTCTimestamp, 62>;
//-------------------------------------------------------------------------------------------------
using SettlmntTyp = Field<char, 63>;
const char SettlmntTyp_REGULAR('0');
const char SettlmntTyp_CASH('1');
const char SettlmntTyp_NEXT_DAY('2');
const char SettlmntTyp_T_PLUS_2('3');
const char SettlmntTyp_T_PLUS_3('4');
const char SettlmntTyp_T_PLUS_4('5');
const char SettlmntTyp_FUTURE('6');
const char SettlmntTyp_WHEN_ISSUED('7');
const char SettlmntTyp_SELLERS_OPTION('8');
const char SettlmntTyp_T_PLUS_5('9');
const size_t SettlmntTyp_realm_els(10);
//-------------------------------------------------------------------------------------------------
using FutSettDate = Field<LocalMktDate, 64>;
//-------------------------------------------------------------------------------------------------
using SymbolSfx = Field<f8String, 65>;
//-------------------------------------------------------------------------------------------------
using ListID = Field<f8String, 66>;
//-------------------------------------------------------------------------------------------------
using ListSeqNo = Field<int, 67>;
//-------------------------------------------------------------------------------------------------
using TotNoOrders = Field<int, 68>;
//-------------------------------------------------------------------------------------------------
using ListExecInst = Field<f8String, 69>;
//-------------------------------------------------------------------------------------------------
using AllocID = Field<f8String, 70>;
//-------------------------------------------------------------------------------------------------
using AllocTransType = Field<char, 71>;
const char AllocTransType_NEW('0');
const char AllocTransType_REPLACE('1');
const char AllocTransType_CANCEL('2');
const char AllocTransType_PRELIMINARY('3');
const char AllocTransType_CALCULATED('4');
const char AllocTransType_CALCULATED_WITHOUT_PRELIMINARY('5');
const size_t AllocTransType_realm_els(6);
//-------------------------------------------------------------------------------------------------
using RefAllocID = Field<f8String, 72>;
//-------------------------------------------------------------------------------------------------
using NoOrders = Field<int, 73>;
//-------------------------------------------------------------------------------------------------
using AvgPrxPrecision = Field<int, 74>;
//-------------------------------------------------------------------------------------------------
using TradeDate = Field<LocalMktDate, 75>;
//-------------------------------------------------------------------------------------------------
using ExecBroker = Field<f8String, 76>;
//-------------------------------------------------------------------------------------------------
using OpenClose = Field<char, 77>;
const char OpenClose_CLOSE('C');
const char OpenClose_OPEN('O');
const size_t OpenClose_realm_els(2);
//-------------------------------------------------------------------------------------------------
using NoAllocs = Field<int, 78>;
//-------------------------------------------------------------------------------------------------
using AllocAccount = Field<f8String, 79>;
//-------------------------------------------------------------------------------------------------
using AllocShares = Field<Qty, 80>;
//-------------------------------------------------------------------------------------------------
using ProcessCode = Field<char, 81>;
const char ProcessCode_REGULAR('0');
const char ProcessCode_SOFT_DOLLAR('1');
const char ProcessCode_STEP_IN('2');
const char ProcessCode_STEP_OUT('3');
const char ProcessCode_SOFT_DOLLAR_STEP_IN('4');
const char ProcessCode_SOFT_DOLLAR_STEP_OUT('5');
const char ProcessCode_PLAN_SPONSOR('6');
const size_t ProcessCode_realm_els(7);
//-------------------------------------------------------------------------------------------------
using NoRpts = Field<int, 82>;
//-------------------------------------------------------------------------------------------------
using RptSeq = Field<int, 83>;
//-------------------------------------------------------------------------------------------------
using CxlQty = Field<Qty, 84>;
//-------------------------------------------------------------------------------------------------
using AllocStatus = Field<int, 87>;
const int AllocStatus_ACCEPTED(0);
const int AllocStatus_REJECTED(1);
const int AllocStatus_PARTIAL_ACCEPT(2);
const int AllocStatus_RECEIVED(3);
const size_t AllocStatus_realm_els(4);
//-------------------------------------------------------------------------------------------------
using AllocRejCode = Field<int, 88>;
const int AllocRejCode_UNKNOWN_ACCOUNT(0);
const int AllocRejCode_INCORRECT_QUANTITY(1);
const int AllocRejCode_INCORRECT_AVERAGE_PRICE(2);
const int AllocRejCode_UNKNOWN_EXECUTING_BROKER_MNEMONIC(3);
const int AllocRejCode_COMMISSION_DIFFERENCE(4);
const int AllocRejCode_UNKNOWN_ORDERID(5);
const int AllocRejCode_UNKNOWN_LISTID(6);
const int AllocRejCode_OTHER(7);
const size_t AllocRejCode_realm_els(8);
//-------------------------------------------------------------------------------------------------
using Signature = Field<data, 89>;
//-------------------------------------------------------------------------------------------------
using SecureDataLen = Field<Length, 90>;
//-------------------------------------------------------------------------------------------------
using SecureData = Field<data, 91>;
//-------------------------------------------------------------------------------------------------
using BrokerOfCredit = Field<f8String, 92>;
//-------------------------------------------------------------------------------------------------
using SignatureLength = Field<Length, 93>;
//-------------------------------------------------------------------------------------------------
using EmailType = Field<char, 94>;
const char EmailType_NEW('0');
const char EmailType_REPLY('1');
const char EmailType_ADMIN_REPLY('2');
const size_t EmailType_realm_els(3);
//-------------------------------------------------------------------------------------------------
using RawDataLength = Field<Length, 95>;
//-------------------------------------------------------------------------------------------------
using RawData = Field<data, 96>;
//-------------------------------------------------------------------------------------------------
using PossResend = Field<Boolean, 97>;
const char PossResend_NO('N');
const char PossResend_YES('Y');
const size_t PossResend_realm_els(2);
//-------------------------------------------------------------------------------------------------
using EncryptMethod = Field<int, 98>;
const int EncryptMethod_NONE(0);
const int EncryptMethod_PKCS(1);
const int EncryptMethod_DES(2);
const int EncryptMethod_PKCS_DES(3);
const int EncryptMethod_PGP_DES(4);
const int EncryptMethod_PGP_DES_MD5(5);
const int EncryptMethod_PEM_DES_MD5(6);
const size_t EncryptMethod_realm_els(7);
//-------------------------------------------------------------------------------------------------
using StopPx = Field<price, 99>;
//-------------------------------------------------------------------------------------------------
using ExDestination = Field<Exchange, 100>;
//-------------------------------------------------------------------------------------------------
using CxlRejReason = Field<int, 102>;
const int CxlRejReason_TOO_LATE_TO_CANCEL(0);
const int CxlRejReason_UNKNOWN_ORDER(1);
const int CxlRejReason_BROKER_OPTION(2);
const int CxlRejReason_ORDER_ALREADY_IN_PENDING_CANCEL_OR_PENDING_REPLACE_STATUS(3);
const size_t CxlRejReason_realm_els(4);
//-------------------------------------------------------------------------------------------------
using OrdRejReason = Field<int, 103>;
const int OrdRejReason_BROKER_OPTION(0);
const int OrdRejReason_UNKNOWN_SYMBOL(1);
const int OrdRejReason_EXCHANGE_CLOSED(2);
const int OrdRejReason_ORDER_EXCEEDS_LIMIT(3);
const int OrdRejReason_TOO_LATE_TO_ENTER(4);
const int OrdRejReason_UNKNOWN_ORDER(5);
const int OrdRejReason_DUPLICATE_ORDER(6);
const int OrdRejReason_DUPLICATE_OF_A_VERBALLY_COMMUNICATED_ORDER(7);
const int OrdRejReason_STALE_ORDER(8);
const size_t OrdRejReason_realm_els(9);
//-------------------------------------------------------------------------------------------------
using IOIQualifier = Field<char, 104>;
const char IOIQualifier_ALL_OR_NONE('A');
const char IOIQualifier_AT_THE_CLOSE('C');
const char IOIQualifier_IN_TOUCH_WITH('I');
const char IOIQualifier_LIMIT('L');
const char IOIQualifier_MORE_BEHIND('M');
const char IOIQualifier_AT_THE_OPEN('O');
const char IOIQualifier_TAKING_A_POSITION('P');
const char IOIQualifier_AT_THE_MARKET('Q');
const char IOIQualifier_READY_TO_TRADE('R');
const char IOIQualifier_PORTFOLIO_SHOW_N('S');
const char IOIQualifier_THROUGH_THE_DAY('T');
const char IOIQualifier_VERSUS('V');
const char IOIQualifier_INDICATION('W');
const char IOIQualifier_CROSSING_OPPORTUNITY('X');
const char IOIQualifier_AT_THE_MIDPOINT('Y');
const char IOIQualifier_PRE_OPEN('Z');
const size_t IOIQualifier_realm_els(16);
//-------------------------------------------------------------------------------------------------
using WaveNo = Field<f8String, 105>;
//-------------------------------------------------------------------------------------------------
using Issuer = Field<f8String, 106>;
//-------------------------------------------------------------------------------------------------
using SecurityDesc = Field<f8String, 107>;
//-------------------------------------------------------------------------------------------------
using HeartBtInt = Field<int, 108>;
//-------------------------------------------------------------------------------------------------
using ClientID = Field<f8String, 109>;
//-------------------------------------------------------------------------------------------------
using MinQty = Field<Qty, 110>;
//-------------------------------------------------------------------------------------------------
using MaxFloor = Field<Qty, 111>;
//-------------------------------------------------------------------------------------------------
using TestReqID = Field<f8String, 112>;
//-------------------------------------------------------------------------------------------------
using ReportToExch = Field<Boolean, 113>;
const char ReportToExch_NO('N');
const char ReportToExch_YES('Y');
const size_t ReportToExch_realm_els(2);
//-------------------------------------------------------------------------------------------------
using LocateReqd = Field<Boolean, 114>;
const char LocateReqd_NO('N');
const char LocateReqd_YES('Y');
const size_t LocateReqd_realm_els(2);
//-------------------------------------------------------------------------------------------------
using OnBehalfOfCompID = Field<f8String, 115>;
//-------------------------------------------------------------------------------------------------
using OnBehalfOfSubID = Field<f8String, 116>;
//-------------------------------------------------------------------------------------------------
using QuoteID = Field<f8String, 117>;
//-------------------------------------------------------------------------------------------------
using NetMoney = Field<Amt, 118>;
//-------------------------------------------------------------------------------------------------
using SettlCurrAmt = Field<Amt, 119>;
//-------------------------------------------------------------------------------------------------
using SettlCurrency = Field<currency, 120>;
//-------------------------------------------------------------------------------------------------
using ForexReq = Field<Boolean, 121>;
const char ForexReq_NO('N');
const char ForexReq_YES('Y');
const size_t ForexReq_realm_els(2);
//-------------------------------------------------------------------------------------------------
using OrigSendingTime = Field<UTCTimestamp, 122>;
//-------------------------------------------------------------------------------------------------
using GapFillFlag = Field<Boolean, 123>;
const char GapFillFlag_NO('N');
const char GapFillFlag_YES('Y');
const size_t GapFillFlag_realm_els(2);
//-------------------------------------------------------------------------------------------------
using NoExecs = Field<int, 124>;
//-------------------------------------------------------------------------------------------------
using ExpireTime = Field<UTCTimestamp, 126>;
//-------------------------------------------------------------------------------------------------
using DKReason = Field<char, 127>;
const char DKReason_UNKNOWN_SYMBOL('A');
const char DKReason_WRONG_SIDE('B');
const char DKReason_QUANTITY_EXCEEDS_ORDER('C');
const char DKReason_NO_MATCHING_ORDER('D');
const char DKReason_PRICE_EXCEEDS_LIMIT('E');
const char DKReason_OTHER('Z');
const size_t DKReason_realm_els(6);
//-------------------------------------------------------------------------------------------------
using DeliverToCompID = Field<f8String, 128>;
//-------------------------------------------------------------------------------------------------
using DeliverToSubID = Field<f8String, 129>;
//-------------------------------------------------------------------------------------------------
using IOINaturalFlag = Field<Boolean, 130>;
const char IOINaturalFlag_NO('N');
const char IOINaturalFlag_YES('Y');
const size_t IOINaturalFlag_realm_els(2);
//-------------------------------------------------------------------------------------------------
using QuoteReqID = Field<f8String, 131>;
//-------------------------------------------------------------------------------------------------
using BidPx = Field<price, 132>;
//-------------------------------------------------------------------------------------------------
using OfferPx = Field<price, 133>;
//-------------------------------------------------------------------------------------------------
using BidSize = Field<Qty, 134>;
//-------------------------------------------------------------------------------------------------
using OfferSize = Field<Qty, 135>;
//-------------------------------------------------------------------------------------------------
using NoMiscFees = Field<int, 136>;
//-------------------------------------------------------------------------------------------------
using MiscFeeAmt = Field<Amt, 137>;
//-------------------------------------------------------------------------------------------------
using MiscFeeCurr = Field<currency, 138>;
//-------------------------------------------------------------------------------------------------
using MiscFeeType = Field<char, 139>;
const char MiscFeeType_REGULATORY('1');
const char MiscFeeType_TAX('2');
const char MiscFeeType_LOCAL_COMMISSION('3');
const char MiscFeeType_EXCHANGE_FEES('4');
const char MiscFeeType_STAMP('5');
const char MiscFeeType_LEVY('6');
const char MiscFeeType_OTHER('7');
const char MiscFeeType_MARKUP('8');
const char MiscFeeType_CONSUMPTION_TAX('9');
const size_t MiscFeeType_realm_els(9);
//-------------------------------------------------------------------------------------------------
using PrevClosePx = Field<price, 140>;
//-------------------------------------------------------------------------------------------------
using ResetSeqNumFlag = Field<Boolean, 141>;
const char ResetSeqNumFlag_NO('N');
const char ResetSeqNumFlag_YES('Y');
const size_t ResetSeqNumFlag_realm_els(2);
//-------------------------------------------------------------------------------------------------
using SenderLocationID = Field<f8String, 142>;
//-------------------------------------------------------------------------------------------------
using TargetLocationID = Field<f8String, 143>;
//-------------------------------------------------------------------------------------------------
using OnBehalfOfLocationID = Field<f8String, 144>;
//-------------------------------------------------------------------------------------------------
using DeliverToLocationID = Field<f8String, 145>;
//-------------------------------------------------------------------------------------------------
using NoRelatedSym = Field<int, 146>;
//-------------------------------------------------------------------------------------------------
using Subject = Field<f8String, 147>;
//-------------------------------------------------------------------------------------------------
using Headline = Field<f8String, 148>;
//-------------------------------------------------------------------------------------------------
using URLLink = Field<f8String, 149>;
//-------------------------------------------------------------------------------------------------
using ExecType = Field<char, 150>;
const char ExecType_NEW('0');
const char ExecType_PARTIAL_FILL('1');
const char ExecType_FILL('2');
const char ExecType_DONE_FOR_DAY('3');
const char ExecType_CANCELED('4');
const char ExecType_REPLACE('5');
const char ExecType_PENDING_CANCEL('6');
const char ExecType_STOPPED('7');
const char ExecType_REJECTED('8');
const char ExecType_SUSPENDED('9');
const char ExecType_PENDING_NEW('A');
const char ExecType_CALCULATED('B');
const char ExecType_EXPIRED('C');
const char ExecType_RESTATED('D');
const char ExecType_PENDING_REPLACE('E');
const char ExecType_TRIGGERED_OR_ACTIVATED_BY_SYSTEM('L');
const size_t ExecType_realm_els(16);
//-------------------------------------------------------------------------------------------------
using LeavesQty = Field<Qty, 151>;
//-------------------------------------------------------------------------------------------------
using CashOrderQty = Field<Qty, 152>;
//-------------------------------------------------------------------------------------------------
using AllocAvgPx = Field<price, 153>;
//-------------------------------------------------------------------------------------------------
using AllocNetMoney = Field<Amt, 154>;
//-------------------------------------------------------------------------------------------------
using SettlCurrFxRate = Field<fp_type, 155>;
//-------------------------------------------------------------------------------------------------
using SettlCurrFxRateCalc = Field<char, 156>;
const char SettlCurrFxRateCalc_DIVIDE('D');
const char SettlCurrFxRateCalc_MULTIPLY('M');
const size_t SettlCurrFxRateCalc_realm_els(2);
//-------------------------------------------------------------------------------------------------
using NumDaysInterest = Field<int, 157>;
//-------------------------------------------------------------------------------------------------
using AccruedInterestRate = Field<fp_type, 158>;
//-------------------------------------------------------------------------------------------------
using AccruedInterestAmt = Field<Amt, 159>;
//-------------------------------------------------------------------------------------------------
using SettlInstMode = Field<char, 160>;
const char SettlInstMode_DEFAULT('0');
const char SettlInstMode_STANDING_INSTRUCTIONS_PROVIDED('1');
const char SettlInstMode_SPECIFIC_ALLOCATION_ACCOUNT_OVERRIDING('2');
const char SettlInstMode_SPECIFIC_ALLOCATION_ACCOUNT_STANDING('3');
const size_t SettlInstMode_realm_els(4);
//-------------------------------------------------------------------------------------------------
using AllocText = Field<f8String, 161>;
//-------------------------------------------------------------------------------------------------
using SettlInstID = Field<f8String, 162>;
//-------------------------------------------------------------------------------------------------
using SettlInstTransType = Field<char, 163>;
const char SettlInstTransType_CANCEL('C');
const char SettlInstTransType_NEW('N');
const char SettlInstTransType_REPLACE('R');
const size_t SettlInstTransType_realm_els(3);
//-------------------------------------------------------------------------------------------------
using EmailThreadID = Field<f8String, 164>;
//-------------------------------------------------------------------------------------------------
using SettlInstSource = Field<char, 165>;
const char SettlInstSource_BROKERS_INSTRUCTIONS('1');
const char SettlInstSource_INSTITUTIONS_INSTRUCTIONS('2');
const size_t SettlInstSource_realm_els(2);
//-------------------------------------------------------------------------------------------------
using SettlLocation = Field<f8String, 166>;
const f8String SettlLocation_CEDEL("CED");
const f8String SettlLocation_DEPOSITORY_TRUST_COMPANY("DTC");
const f8String SettlLocation_EUROCLEAR("EUR");
const f8String SettlLocation_FEDERAL_BOOK_ENTRY("FED");
const f8String SettlLocation_LOCAL_MARKET_SETTLE_LOCATION("ISO Country Code");
const f8String SettlLocation_PHYSICAL("PNY");
const f8String SettlLocation_PARTICIPANT_TRUST_COMPANY("PTC");
const size_t SettlLocation_realm_els(7);
//-------------------------------------------------------------------------------------------------
using SecurityType = Field<f8String, 167>;
const f8String SecurityType_WILDCARD_ENTRY("?");
const f8String SecurityType_BANKERS_ACCEPTANCE("BA");
const f8String SecurityType_CONVERTIBLE_BOND("CB");
const f8String SecurityType_CERTIFICATE_OF_DEPOSIT("CD");
const f8String SecurityType_COLLATERALIZE_MORTGAGE_OBLIGATION("CMO");
const f8String SecurityType_CORPORATE_BOND("CORP");
const f8String SecurityType_COMMERCIAL_PAPER("CP");
const f8String SecurityType_CORPORATE_PRIVATE_PLACEMENT("CPP");
const f8String SecurityType_COMMON_STOCK("CS");
const f8String SecurityType_FEDERAL_HOUSING_AUTHORITY("FHA");
const f8String SecurityType_FEDERAL_HOME_LOAN("FHL");
const f8String SecurityType_FEDERAL_NATIONAL_MORTGAGE_ASSOCIATION("FN");
const f8String SecurityType_FOREIGN_EXCHANGE_CONTRACT("FOR");
const f8String SecurityType_FUTURE("FUT");
const f8String SecurityType_GOVERNMENT_NATIONAL_MORTGAGE_ASSOCIATION("GN");
const f8String SecurityType_TREASURIES_PLUS_AGENCY_DEBENTURE("GOVT");
const f8String SecurityType_MORTGAGE_IOETTE("IET");
const f8String SecurityType_MUTUAL_FUND("MF");
const f8String SecurityType_MORTGAGE_INTEREST_ONLY("MIO");
const f8String SecurityType_MORTGAGE_PRINCIPAL_ONLY("MPO");
const f8String SecurityType_MORTGAGE_PRIVATE_PLACEMENT("MPP");
const f8String SecurityType_MISCELLANEOUS_PASS_THRU("MPT");
const f8String SecurityType_MUNICIPAL_BOND("MUNI");
const f8String SecurityType_NO_ISITC_SECURITY_TYPE("NONE");
const f8String SecurityType_OPTION("OPT");
const f8String SecurityType_PREFERRED_STOCK("PS");
const f8String SecurityType_REPURCHASE_AGREEMENT("RP");
const f8String SecurityType_REVERSE_REPURCHASE_AGREEMENT("RVRP");
const f8String SecurityType_STUDENT_LOAN_MARKETING_ASSOCIATION("SL");
const f8String SecurityType_TIME_DEPOSIT("TD");
const f8String SecurityType_US_TREASURY_BILL("USTB");
const f8String SecurityType_WARRANT("WAR");
const f8String SecurityType_CATS_TIGERS_LIONS("ZOO");
const size_t SecurityType_realm_els(33);
//-------------------------------------------------------------------------------------------------
using EffectiveTime = Field<UTCTimestamp, 168>;
//-------------------------------------------------------------------------------------------------
using StandInstDbType = Field<int, 169>;
const int StandInstDbType_OTHER(0);
const int StandInstDbType_DTC_SID(1);
const int StandInstDbType_THOMSON_ALERT(2);
const int StandInstDbType_A_GLOBAL_CUSTODIAN(3);
const size_t StandInstDbType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using StandInstDbName = Field<f8String, 170>;
//-------------------------------------------------------------------------------------------------
using StandInstDbID = Field<f8String, 171>;
//-------------------------------------------------------------------------------------------------
using SettlDeliveryType = Field<int, 172>;
//-------------------------------------------------------------------------------------------------
using SettlDepositoryCode = Field<f8String, 173>;
//-------------------------------------------------------------------------------------------------
using SettlBrkrCode = Field<f8String, 174>;
//-------------------------------------------------------------------------------------------------
using SettlInstCode = Field<f8String, 175>;
//-------------------------------------------------------------------------------------------------
using SecuritySettlAgentName = Field<f8String, 176>;
//-------------------------------------------------------------------------------------------------
using SecuritySettlAgentCode = Field<f8String, 177>;
//-------------------------------------------------------------------------------------------------
using SecuritySettlAgentAcctNum = Field<f8String, 178>;
//-------------------------------------------------------------------------------------------------
using SecuritySettlAgentAcctName = Field<f8String, 179>;
//-------------------------------------------------------------------------------------------------
using SecuritySettlAgentContactName = Field<f8String, 180>;
//-------------------------------------------------------------------------------------------------
using SecuritySettlAgentContactPhone = Field<f8String, 181>;
//-------------------------------------------------------------------------------------------------
using CashSettlAgentName = Field<f8String, 182>;
//-------------------------------------------------------------------------------------------------
using CashSettlAgentCode = Field<f8String, 183>;
//-------------------------------------------------------------------------------------------------
using CashSettlAgentAcctNum = Field<f8String, 184>;
//-------------------------------------------------------------------------------------------------
using CashSettlAgentAcctName = Field<f8String, 185>;
//-------------------------------------------------------------------------------------------------
using CashSettlAgentContactName = Field<f8String, 186>;
//-------------------------------------------------------------------------------------------------
using CashSettlAgentContactPhone = Field<f8String, 187>;
//-------------------------------------------------------------------------------------------------
using BidSpotRate = Field<price, 188>;
//-------------------------------------------------------------------------------------------------
using BidForwardPoints = Field<PriceOffset, 189>;
//-------------------------------------------------------------------------------------------------
using OfferSpotRate = Field<price, 190>;
//-------------------------------------------------------------------------------------------------
using OfferForwardPoints = Field<PriceOffset, 191>;
//-------------------------------------------------------------------------------------------------
using OrderQty2 = Field<Qty, 192>;
//-------------------------------------------------------------------------------------------------
using FutSettDate2 = Field<LocalMktDate, 193>;
//-------------------------------------------------------------------------------------------------
using LastSpotRate = Field<price, 194>;
//-------------------------------------------------------------------------------------------------
using LastForwardPoints = Field<PriceOffset, 195>;
//-------------------------------------------------------------------------------------------------
using AllocLinkID = Field<f8String, 196>;
//-------------------------------------------------------------------------------------------------
using AllocLinkType = Field<int, 197>;
const int AllocLinkType_F_X_NETTING(0);
const int AllocLinkType_F_X_SWAP(1);
const size_t AllocLinkType_realm_els(2);
//-------------------------------------------------------------------------------------------------
using SecondaryOrderID = Field<f8String, 198>;
//-------------------------------------------------------------------------------------------------
using NoIOIQualifiers = Field<int, 199>;
//-------------------------------------------------------------------------------------------------
using MaturityMonthYear = Field<MonthYear, 200>;
//-------------------------------------------------------------------------------------------------
using PutOrCall = Field<int, 201>;
const int PutOrCall_PUT(0);
const int PutOrCall_CALL(1);
const size_t PutOrCall_realm_els(2);
//-------------------------------------------------------------------------------------------------
using StrikePrice = Field<price, 202>;
//-------------------------------------------------------------------------------------------------
using CoveredOrUncovered = Field<int, 203>;
const int CoveredOrUncovered_COVERED(0);
const int CoveredOrUncovered_UNCOVERED(1);
const size_t CoveredOrUncovered_realm_els(2);
//-------------------------------------------------------------------------------------------------
using CustomerOrFirm = Field<int, 204>;
const int CustomerOrFirm_CUSTOMER(0);
const int CustomerOrFirm_FIRM(1);
const size_t CustomerOrFirm_realm_els(2);
//-------------------------------------------------------------------------------------------------
using MaturityDay = Field<DayOfMonth, 205>;
//-------------------------------------------------------------------------------------------------
using OptAttribute = Field<char, 206>;
//-------------------------------------------------------------------------------------------------
using SecurityExchange = Field<Exchange, 207>;
//-------------------------------------------------------------------------------------------------
using NotifyBrokerOfCredit = Field<Boolean, 208>;
const char NotifyBrokerOfCredit_NO('N');
const char NotifyBrokerOfCredit_YES('Y');
const size_t NotifyBrokerOfCredit_realm_els(2);
//-------------------------------------------------------------------------------------------------
using AllocHandlInst = Field<int, 209>;
const int AllocHandlInst_MATCH(1);
const int AllocHandlInst_FORWARD(2);
const int AllocHandlInst_FORWARD_AND_MATCH(3);
const size_t AllocHandlInst_realm_els(3);
//-------------------------------------------------------------------------------------------------
using MaxShow = Field<Qty, 210>;
//-------------------------------------------------------------------------------------------------
using PegDifference = Field<PriceOffset, 211>;
//-------------------------------------------------------------------------------------------------
using XmlDataLen = Field<Length, 212>;
//-------------------------------------------------------------------------------------------------
using XmlData = Field<data, 213>;
//-------------------------------------------------------------------------------------------------
using SettlInstRefID = Field<f8String, 214>;
//-------------------------------------------------------------------------------------------------
using NoRoutingIDs = Field<int, 215>;
//-------------------------------------------------------------------------------------------------
using RoutingType = Field<int, 216>;
const int RoutingType_TARGET_FIRM(1);
const int RoutingType_TARGET_LIST(2);
const int RoutingType_BLOCK_FIRM(3);
const int RoutingType_BLOCK_LIST(4);
const size_t RoutingType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using RoutingID = Field<f8String, 217>;
//-------------------------------------------------------------------------------------------------
using SpreadToBenchmark = Field<PriceOffset, 218>;
//-------------------------------------------------------------------------------------------------
using Benchmark = Field<char, 219>;
const char Benchmark_CURVE('1');
const char Benchmark_5_YR('2');
const char Benchmark_OLD_5('3');
const char Benchmark_10_YR('4');
const char Benchmark_OLD_10('5');
const char Benchmark_30_YR('6');
const char Benchmark_OLD_30('7');
const char Benchmark_3_MO_LIBOR('8');
const char Benchmark_6_MO_LIBOR('9');
const size_t Benchmark_realm_els(9);
//-------------------------------------------------------------------------------------------------
using CouponRate = Field<fp_type, 223>;
//-------------------------------------------------------------------------------------------------
using ContractMultiplier = Field<fp_type, 231>;
//-------------------------------------------------------------------------------------------------
using MDReqID = Field<f8String, 262>;
//-------------------------------------------------------------------------------------------------
using SubscriptionRequestType = Field<char, 263>;
const char SubscriptionRequestType_SNAPSHOT('0');
const char SubscriptionRequestType_SNAPSHOT_PLUS_UPDATES('1');
const char SubscriptionRequestType_DISABLE_PREVIOUS_SNAPSHOT_PLUS_UPDATE_REQUEST('2');
const size_t SubscriptionRequestType_realm_els(3);
//-------------------------------------------------------------------------------------------------
using MarketDepth = Field<int, 264>;
//-------------------------------------------------------------------------------------------------
using MDUpdateType = Field<int, 265>;
const int MDUpdateType_FULL_REFRESH(0);
const int MDUpdateType_INCREMENTAL_REFRESH(1);
const size_t MDUpdateType_realm_els(2);
//-------------------------------------------------------------------------------------------------
using AggregatedBook = Field<Boolean, 266>;
const char AggregatedBook_NO('N');
const char AggregatedBook_YES('Y');
const size_t AggregatedBook_realm_els(2);
//-------------------------------------------------------------------------------------------------
using NoMDEntryTypes = Field<int, 267>;
//-------------------------------------------------------------------------------------------------
using NoMDEntries = Field<int, 268>;
//-------------------------------------------------------------------------------------------------
using MDEntryType = Field<char, 269>;
const char MDEntryType_BID('0');
const char MDEntryType_OFFER('1');
const char MDEntryType_TRADE('2');
const char MDEntryType_INDEX_VALUE('3');
const char MDEntryType_OPENING_PRICE('4');
const char MDEntryType_CLOSING_PRICE('5');
const char MDEntryType_SETTLEMENT_PRICE('6');
const char MDEntryType_TRADING_SESSION_HIGH_PRICE('7');
const char MDEntryType_TRADING_SESSION_LOW_PRICE('8');
const char MDEntryType_TRADING_SESSION_VWAP_PRICE('9');
const size_t MDEntryType_realm_els(10);
//-------------------------------------------------------------------------------------------------
using MDEntryPx = Field<price, 270>;
//-------------------------------------------------------------------------------------------------
using MDEntrySize = Field<Qty, 271>;
//-------------------------------------------------------------------------------------------------
using MDEntryDate = Field<UTCDateOnly, 272>;
//-------------------------------------------------------------------------------------------------
using MDEntryTime = Field<UTCTimeOnly, 273>;
//-------------------------------------------------------------------------------------------------
using TickDirection = Field<char, 274>;
const char TickDirection_PLUS_TICK('0');
const char TickDirection_ZERO_PLUS_TICK('1');
const char TickDirection_MINUS_TICK('2');
const char TickDirection_ZERO_MINUS_TICK('3');
const size_t TickDirection_realm_els(4);
//-------------------------------------------------------------------------------------------------
using MDMkt = Field<Exchange, 275>;
//-------------------------------------------------------------------------------------------------
using QuoteCondition = Field<MultipleStringValue, 276>;
const f8String QuoteCondition_OPEN("A");
const f8String QuoteCondition_CLOSED("B");
const f8String QuoteCondition_EXCHANGE_BEST("C");
const f8String QuoteCondition_CONSOLIDATED_BEST("D");
const f8String QuoteCondition_LOCKED("E");
const f8String QuoteCondition_CROSSED("F");
const f8String QuoteCondition_DEPTH("G");
const f8String QuoteCondition_FAST_TRADING("H");
const f8String QuoteCondition_NON_FIRM("I");
const size_t QuoteCondition_realm_els(9);
//-------------------------------------------------------------------------------------------------
using TradeCondition = Field<MultipleStringValue, 277>;
const f8String TradeCondition_CASH("A");
const f8String TradeCondition_AVERAGE_PRICE_TRADE("B");
const f8String TradeCondition_CASH_TRADE("C");
const f8String TradeCondition_NEXT_DAY("D");
const f8String TradeCondition_OPENING("E");
const f8String TradeCondition_INTRADAY_TRADE_DETAIL("F");
const f8String TradeCondition_RULE_127_TRADE("G");
const f8String TradeCondition_RULE_155_TRADE("H");
const f8String TradeCondition_SOLD_LAST("I");
const f8String TradeCondition_NEXT_DAY_TRADE("J");
const f8String TradeCondition_OPENED("K");
const f8String TradeCondition_SELLER("L");
const f8String TradeCondition_SOLD("M");
const f8String TradeCondition_STOPPED_STOCK("N");
const size_t TradeCondition_realm_els(14);
//-------------------------------------------------------------------------------------------------
using MDEntryID = Field<f8String, 278>;
//-------------------------------------------------------------------------------------------------
using MDUpdateAction = Field<char, 279>;
const char MDUpdateAction_NEW('0');
const char MDUpdateAction_CHANGE('1');
const char MDUpdateAction_DELETE('2');
const size_t MDUpdateAction_realm_els(3);
//-------------------------------------------------------------------------------------------------
using MDEntryRefID = Field<f8String, 280>;
//-------------------------------------------------------------------------------------------------
using MDReqRejReason = Field<char, 281>;
const char MDReqRejReason_UNKNOWN_SYMBOL('0');
const char MDReqRejReason_DUPLICATE_MDREQID('1');
const char MDReqRejReason_INSUFFICIENT_BANDWIDTH('2');
const char MDReqRejReason_INSUFFICIENT_PERMISSIONS('3');
const char MDReqRejReason_UNSUPPORTED_SUBSCRIPTIONREQUESTTYPE('4');
const char MDReqRejReason_UNSUPPORTED_MARKETDEPTH('5');
const char MDReqRejReason_UNSUPPORTED_MDUPDATETYPE('6');
const char MDReqRejReason_UNSUPPORTED_AGGREGATEDBOOK('7');
const char MDReqRejReason_UNSUPPORTED_MDENTRYTYPE('8');
const size_t MDReqRejReason_realm_els(9);
//-------------------------------------------------------------------------------------------------
using MDEntryOriginator = Field<f8String, 282>;
//-------------------------------------------------------------------------------------------------
using LocationID = Field<f8String, 283>;
//-------------------------------------------------------------------------------------------------
using DeskID = Field<f8String, 284>;
//-------------------------------------------------------------------------------------------------
using DeleteReason = Field<char, 285>;
const char DeleteReason_CANCELATION('0');
const char DeleteReason_ERROR('1');
const size_t DeleteReason_realm_els(2);
//-------------------------------------------------------------------------------------------------
using OpenCloseSettleFlag = Field<char, 286>;
const char OpenCloseSettleFlag_DAILY_OPEN('0');
const char OpenCloseSettleFlag_SESSION_OPEN('1');
const char OpenCloseSettleFlag_DELIVERY_SETTLEMENT_PRICE('2');
const size_t OpenCloseSettleFlag_realm_els(3);
//-------------------------------------------------------------------------------------------------
using SellerDays = Field<int, 287>;
//-------------------------------------------------------------------------------------------------
using MDEntryBuyer = Field<f8String, 288>;
//-------------------------------------------------------------------------------------------------
using MDEntrySeller = Field<f8String, 289>;
//-------------------------------------------------------------------------------------------------
using MDEntryPositionNo = Field<int, 290>;
//-------------------------------------------------------------------------------------------------
using FinancialStatus = Field<char, 291>;
const char FinancialStatus_BANKRUPT('1');
const size_t FinancialStatus_realm_els(1);
//-------------------------------------------------------------------------------------------------
using CorporateAction = Field<char, 292>;
const char CorporateAction_EX_DIVIDEND('A');
const char CorporateAction_EX_DISTRIBUTION('B');
const char CorporateAction_EX_RIGHTS('C');
const char CorporateAction_NEW('D');
const char CorporateAction_EX_INTEREST('E');
const size_t CorporateAction_realm_els(5);
//-------------------------------------------------------------------------------------------------
using DefBidSize = Field<Qty, 293>;
//-------------------------------------------------------------------------------------------------
using DefOfferSize = Field<Qty, 294>;
//-------------------------------------------------------------------------------------------------
using NoQuoteEntries = Field<int, 295>;
//-------------------------------------------------------------------------------------------------
using NoQuoteSets = Field<int, 296>;
//-------------------------------------------------------------------------------------------------
using QuoteAckStatus = Field<int, 297>;
const int QuoteAckStatus_ACCEPTED(0);
const int QuoteAckStatus_CANCELED_FOR_SYMBOL(1);
const int QuoteAckStatus_CANCELED_FOR_SECURITY_TYPE(2);
const int QuoteAckStatus_CANCELED_FOR_UNDERLYING(3);
const int QuoteAckStatus_CANCELED_ALL(4);
const int QuoteAckStatus_REJECTED(5);
const size_t QuoteAckStatus_realm_els(6);
//-------------------------------------------------------------------------------------------------
using QuoteCancelType = Field<int, 298>;
const int QuoteCancelType_CANCEL_FOR_SYMBOL(1);
const int QuoteCancelType_CANCEL_FOR_SECURITY_TYPE(2);
const int QuoteCancelType_CANCEL_FOR_UNDERLYING_SYMBOL(3);
const int QuoteCancelType_CANCEL_FOR_ALL_QUOTES(4);
const size_t QuoteCancelType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using QuoteEntryID = Field<f8String, 299>;
//-------------------------------------------------------------------------------------------------
using QuoteRejectReason = Field<int, 300>;
const int QuoteRejectReason_UNKNOWN_SYMBOL(1);
const int QuoteRejectReason_EXCHANGE(2);
const int QuoteRejectReason_QUOTE_REQUEST_EXCEEDS_LIMIT(3);
const int QuoteRejectReason_TOO_LATE_TO_ENTER(4);
const int QuoteRejectReason_UNKNOWN_QUOTE(5);
const int QuoteRejectReason_DUPLICATE_QUOTE(6);
const int QuoteRejectReason_INVALID_BID_ASK_SPREAD(7);
const int QuoteRejectReason_INVALID_PRICE(8);
const int QuoteRejectReason_NOT_AUTHORIZED_TO_QUOTE_SECURITY(9);
const size_t QuoteRejectReason_realm_els(9);
//-------------------------------------------------------------------------------------------------
using QuoteResponseLevel = Field<int, 301>;
const int QuoteResponseLevel_NO_ACKNOWLEDGEMENT(0);
const int QuoteResponseLevel_ACKNOWLEDGE_ONLY_NEGATIVE_OR_ERRONEOUS_QUOTES(1);
const int QuoteResponseLevel_ACKNOWLEDGE_EACH_QUOTE_MESSAGES(2);
const size_t QuoteResponseLevel_realm_els(3);
//-------------------------------------------------------------------------------------------------
using QuoteSetID = Field<f8String, 302>;
//-------------------------------------------------------------------------------------------------
using QuoteRequestType = Field<int, 303>;
const int QuoteRequestType_MANUAL(1);
const int QuoteRequestType_AUTOMATIC(2);
const size_t QuoteRequestType_realm_els(2);
//-------------------------------------------------------------------------------------------------
using TotQuoteEntries = Field<int, 304>;
//-------------------------------------------------------------------------------------------------
using UnderlyingIDSource = Field<f8String, 305>;
//-------------------------------------------------------------------------------------------------
using UnderlyingIssuer = Field<f8String, 306>;
//-------------------------------------------------------------------------------------------------
using UnderlyingSecurityDesc = Field<f8String, 307>;
//-------------------------------------------------------------------------------------------------
using UnderlyingSecurityExchange = Field<Exchange, 308>;
//-------------------------------------------------------------------------------------------------
using UnderlyingSecurityID = Field<f8String, 309>;
//-------------------------------------------------------------------------------------------------
using UnderlyingSecurityType = Field<f8String, 310>;
//-------------------------------------------------------------------------------------------------
using UnderlyingSymbol = Field<f8String, 311>;
//-------------------------------------------------------------------------------------------------
using UnderlyingSymbolSfx = Field<f8String, 312>;
//-------------------------------------------------------------------------------------------------
using UnderlyingMaturityMonthYear = Field<MonthYear, 313>;
//-------------------------------------------------------------------------------------------------
using UnderlyingMaturityDay = Field<DayOfMonth, 314>;
//-------------------------------------------------------------------------------------------------
using UnderlyingPutOrCall = Field<int, 315>;
//-------------------------------------------------------------------------------------------------
using UnderlyingStrikePrice = Field<price, 316>;
//-------------------------------------------------------------------------------------------------
using UnderlyingOptAttribute = Field<char, 317>;
//-------------------------------------------------------------------------------------------------
using UnderlyingCurrency = Field<currency, 318>;
//-------------------------------------------------------------------------------------------------
using RatioQty = Field<Qty, 319>;
//-------------------------------------------------------------------------------------------------
using SecurityReqID = Field<f8String, 320>;
//-------------------------------------------------------------------------------------------------
using SecurityRequestType = Field<int, 321>;
const int SecurityRequestType_REQUEST_SECURITY_IDENTITY_AND_SPECIFICATIONS(0);
const int SecurityRequestType_REQUEST_SECURITY_IDENTITY_FOR_THE_SPECIFICATIONS_PROVIDED(1);
const int SecurityRequestType_REQUEST_LIST_SECURITY_TYPES(2);
const int SecurityRequestType_REQUEST_LIST_SECURITIES(3);
const size_t SecurityRequestType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using SecurityResponseID = Field<f8String, 322>;
//-------------------------------------------------------------------------------------------------
using SecurityResponseType = Field<int, 323>;
const int SecurityResponseType_ACCEPT_SECURITY_PROPOSAL_AS_IS(1);
const int SecurityResponseType_ACCEPT_SECURITY_PROPOSAL_WITH_REVISIONS_AS_INDICATED_IN_THE_MESSAGE(2);
const int SecurityResponseType_LIST_OF_SECURITY_TYPES_RETURNED_PER_REQUEST(3);
const int SecurityResponseType_LIST_OF_SECURITIES_RETURNED_PER_REQUEST(4);
const int SecurityResponseType_REJECT_SECURITY_PROPOSAL(5);
const int SecurityResponseType_CAN_NOT_MATCH_SELECTION_CRITERIA(6);
const size_t SecurityResponseType_realm_els(6);
//-------------------------------------------------------------------------------------------------
using SecurityStatusReqID = Field<f8String, 324>;
//-------------------------------------------------------------------------------------------------
using UnsolicitedIndicator = Field<Boolean, 325>;
const char UnsolicitedIndicator_NO('N');
const char UnsolicitedIndicator_YES('Y');
const size_t UnsolicitedIndicator_realm_els(2);
//-------------------------------------------------------------------------------------------------
using SecurityTradingStatus = Field<int, 326>;
const int SecurityTradingStatus_OPENING_DELAY(1);
const int SecurityTradingStatus_TRADING_HALT(2);
const int SecurityTradingStatus_RESUME(3);
const int SecurityTradingStatus_NO_OPEN_NO_RESUME(4);
const int SecurityTradingStatus_PRICE_INDICATION(5);
const int SecurityTradingStatus_TRADING_RANGE_INDICATION(6);
const int SecurityTradingStatus_MARKET_IMBALANCE_BUY(7);
const int SecurityTradingStatus_MARKET_IMBALANCE_SELL(8);
const int SecurityTradingStatus_MARKET_ON_CLOSE_IMBALANCE_BUY(9);
const int SecurityTradingStatus_MARKET_ON_CLOSE_IMBALANCE_SELL(10);
const int SecurityTradingStatus_11(11);
const int SecurityTradingStatus_NO_MARKET_IMBALANCE(12);
const int SecurityTradingStatus_NO_MARKET_ON_CLOSE_IMBALANCE(13);
const int SecurityTradingStatus_ITS_PRE_OPENING(14);
const int SecurityTradingStatus_NEW_PRICE_INDICATION(15);
const int SecurityTradingStatus_TRADE_DISSEMINATION_TIME(16);
const int SecurityTradingStatus_READY_TO_TRADE(17);
const int SecurityTradingStatus_NOT_AVAILABLE_FOR_TRADING(18);
const int SecurityTradingStatus_NOT_TRADED_ON_THIS_MARKET(19);
const int SecurityTradingStatus_UNKNOWN_OR_INVALID(20);
const size_t SecurityTradingStatus_realm_els(20);
//-------------------------------------------------------------------------------------------------
using HaltReasonChar = Field<char, 327>;
const char HaltReasonChar_NEWS_DISSEMINATION('D');
const char HaltReasonChar_ORDER_INFLUX('E');
const char HaltReasonChar_ORDER_IMBALANCE('I');
const char HaltReasonChar_ADDITIONAL_INFORMATION('M');
const char HaltReasonChar_NEWS_PENDING('P');
const char HaltReasonChar_EQUIPMENT_CHANGEOVER('X');
const size_t HaltReasonChar_realm_els(6);
//-------------------------------------------------------------------------------------------------
using InViewOfCommon = Field<Boolean, 328>;
const char InViewOfCommon_NO('N');
const char InViewOfCommon_YES('Y');
const size_t InViewOfCommon_realm_els(2);
//-------------------------------------------------------------------------------------------------
using DueToRelated = Field<Boolean, 329>;
const char DueToRelated_NO('N');
const char DueToRelated_YES('Y');
const size_t DueToRelated_realm_els(2);
//-------------------------------------------------------------------------------------------------
using BuyVolume = Field<Qty, 330>;
//-------------------------------------------------------------------------------------------------
using SellVolume = Field<Qty, 331>;
//-------------------------------------------------------------------------------------------------
using HighPx = Field<price, 332>;
//-------------------------------------------------------------------------------------------------
using LowPx = Field<price, 333>;
//-------------------------------------------------------------------------------------------------
using Adjustment = Field<int, 334>;
const int Adjustment_CANCEL(1);
const int Adjustment_ERROR(2);
const int Adjustment_CORRECTION(3);
const size_t Adjustment_realm_els(3);
//-------------------------------------------------------------------------------------------------
using TradSesReqID = Field<f8String, 335>;
//-------------------------------------------------------------------------------------------------
using TradingSessionID = Field<f8String, 336>;
//-------------------------------------------------------------------------------------------------
using ContraTrader = Field<f8String, 337>;
//-------------------------------------------------------------------------------------------------
using TradSesMethod = Field<int, 338>;
const int TradSesMethod_ELECTRONIC(1);
const int TradSesMethod_OPEN_OUTCRY(2);
const int TradSesMethod_TWO_PARTY(3);
const size_t TradSesMethod_realm_els(3);
//-------------------------------------------------------------------------------------------------
using TradSesMode = Field<int, 339>;
const int TradSesMode_TESTING(1);
const int TradSesMode_SIMULATED(2);
const int TradSesMode_PRODUCTION(3);
const size_t TradSesMode_realm_els(3);
//-------------------------------------------------------------------------------------------------
using TradSesStatus = Field<int, 340>;
const int TradSesStatus_HALTED(1);
const int TradSesStatus_OPEN(2);
const int TradSesStatus_CLOSED(3);
const int TradSesStatus_PRE_OPEN(4);
const int TradSesStatus_PRE_CLOSE(5);
const size_t TradSesStatus_realm_els(5);
//-------------------------------------------------------------------------------------------------
using TradSesStartTime = Field<UTCTimestamp, 341>;
//-------------------------------------------------------------------------------------------------
using TradSesOpenTime = Field<UTCTimestamp, 342>;
//-------------------------------------------------------------------------------------------------
using TradSesPreCloseTime = Field<UTCTimestamp, 343>;
//-------------------------------------------------------------------------------------------------
using TradSesCloseTime = Field<UTCTimestamp, 344>;
//-------------------------------------------------------------------------------------------------
using TradSesEndTime = Field<UTCTimestamp, 345>;
//-------------------------------------------------------------------------------------------------
using NumberOfOrders = Field<int, 346>;
//-------------------------------------------------------------------------------------------------
using MessageEncoding = Field<f8String, 347>;
const f8String MessageEncoding_EUC_JP("EUC-JP");
const f8String MessageEncoding_ISO_2022_JP("ISO-2022-JP");
const f8String MessageEncoding_SHIFT_JIS("SHIFT_JIS");
const f8String MessageEncoding_UTF_8("UTF-8");
const size_t MessageEncoding_realm_els(4);
//-------------------------------------------------------------------------------------------------
using EncodedIssuerLen = Field<Length, 348>;
//-------------------------------------------------------------------------------------------------
using EncodedIssuer = Field<data, 349>;
//-------------------------------------------------------------------------------------------------
using EncodedSecurityDescLen = Field<Length, 350>;
//-------------------------------------------------------------------------------------------------
using EncodedSecurityDesc = Field<data, 351>;
//-------------------------------------------------------------------------------------------------
using EncodedListExecInstLen = Field<Length, 352>;
//-------------------------------------------------------------------------------------------------
using EncodedListExecInst = Field<data, 353>;
//-------------------------------------------------------------------------------------------------
using EncodedTextLen = Field<Length, 354>;
//-------------------------------------------------------------------------------------------------
using EncodedText = Field<data, 355>;
//-------------------------------------------------------------------------------------------------
using EncodedSubjectLen = Field<Length, 356>;
//-------------------------------------------------------------------------------------------------
using EncodedSubject = Field<data, 357>;
//-------------------------------------------------------------------------------------------------
using EncodedHeadlineLen = Field<Length, 358>;
//-------------------------------------------------------------------------------------------------
using EncodedHeadline = Field<data, 359>;
//-------------------------------------------------------------------------------------------------
using EncodedAllocTextLen = Field<Length, 360>;
//-------------------------------------------------------------------------------------------------
using EncodedAllocText = Field<data, 361>;
//-------------------------------------------------------------------------------------------------
using EncodedUnderlyingIssuerLen = Field<Length, 362>;
//-------------------------------------------------------------------------------------------------
using EncodedUnderlyingIssuer = Field<data, 363>;
//-------------------------------------------------------------------------------------------------
using EncodedUnderlyingSecurityDescLen = Field<Length, 364>;
//-------------------------------------------------------------------------------------------------
using EncodedUnderlyingSecurityDesc = Field<data, 365>;
//-------------------------------------------------------------------------------------------------
using AllocPrice = Field<price, 366>;
//-------------------------------------------------------------------------------------------------
using QuoteSetValidUntilTime = Field<UTCTimestamp, 367>;
//-------------------------------------------------------------------------------------------------
using QuoteEntryRejectReason = Field<int, 368>;
const int QuoteEntryRejectReason_UNKNOWN_SYMBOL(1);
const int QuoteEntryRejectReason_EXCHANGE(2);
const int QuoteEntryRejectReason_QUOTE_EXCEEDS_LIMIT(3);
const int QuoteEntryRejectReason_TOO_LATE_TO_ENTER(4);
const int QuoteEntryRejectReason_UNKNOWN_QUOTE(5);
const int QuoteEntryRejectReason_DUPLICATE_QUOTE(6);
const int QuoteEntryRejectReason_INVALID_BID_ASK_SPREAD(7);
const int QuoteEntryRejectReason_INVALID_PRICE(8);
const int QuoteEntryRejectReason_NOT_AUTHORIZED_TO_QUOTE_SECURITY(9);
const size_t QuoteEntryRejectReason_realm_els(9);
//-------------------------------------------------------------------------------------------------
using LastMsgSeqNumProcessed = Field<int, 369>;
//-------------------------------------------------------------------------------------------------
using OnBehalfOfSendingTime = Field<UTCTimestamp, 370>;
//-------------------------------------------------------------------------------------------------
using RefTagID = Field<int, 371>;
//-------------------------------------------------------------------------------------------------
using RefMsgType = Field<f8String, 372>;
//-------------------------------------------------------------------------------------------------
using SessionRejectReason = Field<int, 373>;
const int SessionRejectReason_INVALID_TAG_NUMBER(0);
const int SessionRejectReason_REQUIRED_TAG_MISSING(1);
const int SessionRejectReason_TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE(2);
const int SessionRejectReason_UNDEFINED_TAG(3);
const int SessionRejectReason_TAG_SPECIFIED_WITHOUT_A_VALUE(4);
const int SessionRejectReason_VALUE_IS_INCORRECT(5);
const int SessionRejectReason_INCORRECT_DATA_FORMAT_FOR_VALUE(6);
const int SessionRejectReason_DECRYPTION_PROBLEM(7);
const int SessionRejectReason_SIGNATURE_PROBLEM(8);
const int SessionRejectReason_COMPID_PROBLEM(9);
const int SessionRejectReason_SENDINGTIME_ACCURACY_PROBLEM(10);
const int SessionRejectReason_INVALID_MSGTYPE(11);
const size_t SessionRejectReason_realm_els(12);
//-------------------------------------------------------------------------------------------------
using BidRequestTransType = Field<char, 374>;
const char BidRequestTransType_CANCEL('C');
const char BidRequestTransType_NO('N');
const size_t BidRequestTransType_realm_els(2);
//-------------------------------------------------------------------------------------------------
using ContraBroker = Field<f8String, 375>;
//-------------------------------------------------------------------------------------------------
using ComplianceID = Field<f8String, 376>;
//-------------------------------------------------------------------------------------------------
using SolicitedFlag = Field<Boolean, 377>;
const char SolicitedFlag_NO('N');
const char SolicitedFlag_YES('Y');
const size_t SolicitedFlag_realm_els(2);
//-------------------------------------------------------------------------------------------------
using ExecRestatementReason = Field<int, 378>;
const int ExecRestatementReason_GT_CORPORATE_ACTION(0);
const int ExecRestatementReason_GT_RENEWAL(1);
const int ExecRestatementReason_VERBAL_CHANGE(2);
const int ExecRestatementReason_REPRICING_OF_ORDER(3);
const int ExecRestatementReason_BROKER_OPTION(4);
const int ExecRestatementReason_PARTIAL_DECLINE_OF_ORDERQTY(5);
const size_t ExecRestatementReason_realm_els(6);
//-------------------------------------------------------------------------------------------------
using BusinessRejectRefID = Field<f8String, 379>;
//-------------------------------------------------------------------------------------------------
using BusinessRejectReason = Field<int, 380>;
const int BusinessRejectReason_OTHER(0);
const int BusinessRejectReason_UNKOWN_ID(1);
const int BusinessRejectReason_UNKNOWN_SECURITY(2);
const int BusinessRejectReason_UNSUPPORTED_MESSAGE_TYPE(3);
const int BusinessRejectReason_APPLICATION_NOT_AVAILABLE(4);
const int BusinessRejectReason_CONDITIONALLY_REQUIRED_FIELD_MISSING(5);
const size_t BusinessRejectReason_realm_els(6);
//-------------------------------------------------------------------------------------------------
using GrossTradeAmt = Field<Amt, 381>;
//-------------------------------------------------------------------------------------------------
using NoContraBrokers = Field<int, 382>;
//-------------------------------------------------------------------------------------------------
using MaxMessageSize = Field<int, 383>;
//-------------------------------------------------------------------------------------------------
using NoMsgTypes = Field<int, 384>;
//-------------------------------------------------------------------------------------------------
using MsgDirection = Field<char, 385>;
const char MsgDirection_RECEIVE('R');
const char MsgDirection_SEND('S');
const size_t MsgDirection_realm_els(2);
//-------------------------------------------------------------------------------------------------
using NoTradingSessions = Field<int, 386>;
//-------------------------------------------------------------------------------------------------
using TotalVolumeTraded = Field<Qty, 387>;
//-------------------------------------------------------------------------------------------------
using DiscretionInst = Field<char, 388>;
const char DiscretionInst_RELATED_TO_DISPLAYED_PRICE('0');
const char DiscretionInst_RELATED_TO_MARKET_PRICE('1');
const char DiscretionInst_RELATED_TO_PRIMARY_PRICE('2');
const char DiscretionInst_RELATED_TO_LOCAL_PRIMARY_PRICE('3');
const char DiscretionInst_RELATED_TO_MIDPOINT_PRICE('4');
const char DiscretionInst_RELATED_TO_LAST_TRADE_PRICE('5');
const size_t DiscretionInst_realm_els(6);
//-------------------------------------------------------------------------------------------------
using DiscretionOffset = Field<PriceOffset, 389>;
//-------------------------------------------------------------------------------------------------
using BidID = Field<f8String, 390>;
//-------------------------------------------------------------------------------------------------
using ClientBidID = Field<f8String, 391>;
//-------------------------------------------------------------------------------------------------
using ListName = Field<f8String, 392>;
//-------------------------------------------------------------------------------------------------
using TotalNumSecurities = Field<int, 393>;
//-------------------------------------------------------------------------------------------------
using BidType = Field<int, 394>;
//-------------------------------------------------------------------------------------------------
using NumTickets = Field<int, 395>;
//-------------------------------------------------------------------------------------------------
using SideValue1 = Field<Amt, 396>;
//-------------------------------------------------------------------------------------------------
using SideValue2 = Field<Amt, 397>;
//-------------------------------------------------------------------------------------------------
using NoBidDescriptors = Field<int, 398>;
//-------------------------------------------------------------------------------------------------
using BidDescriptorType = Field<int, 399>;
//-------------------------------------------------------------------------------------------------
using BidDescriptor = Field<f8String, 400>;
//-------------------------------------------------------------------------------------------------
using SideValueInd = Field<int, 401>;
//-------------------------------------------------------------------------------------------------
using LiquidityPctLow = Field<fp_type, 402>;
//-------------------------------------------------------------------------------------------------
using LiquidityPctHigh = Field<fp_type, 403>;
//-------------------------------------------------------------------------------------------------
using LiquidityValue = Field<Amt, 404>;
//-------------------------------------------------------------------------------------------------
using EFPTrackingError = Field<fp_type, 405>;
//-------------------------------------------------------------------------------------------------
using FairValue = Field<Amt, 406>;
//-------------------------------------------------------------------------------------------------
using OutsideIndexPct = Field<fp_type, 407>;
//-------------------------------------------------------------------------------------------------
using ValueOfFutures = Field<Amt, 408>;
//-------------------------------------------------------------------------------------------------
using LiquidityIndType = Field<int, 409>;
const int LiquidityIndType_5_DAY_MOVING_AVERAGE(1);
const int LiquidityIndType_20_DAY_MOVING_AVERAGE(2);
const int LiquidityIndType_NORMAL_MARKET_SIZE(3);
const int LiquidityIndType_OTHER(4);
const size_t LiquidityIndType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using WtAverageLiquidity = Field<fp_type, 410>;
//-------------------------------------------------------------------------------------------------
using ExchangeForPhysical = Field<Boolean, 411>;
const char ExchangeForPhysical_NO('N');
const char ExchangeForPhysical_YES('Y');
const size_t ExchangeForPhysical_realm_els(2);
//-------------------------------------------------------------------------------------------------
using OutMainCntryUIndex = Field<Amt, 412>;
//-------------------------------------------------------------------------------------------------
using CrossPercent = Field<fp_type, 413>;
//-------------------------------------------------------------------------------------------------
using ProgRptReqs = Field<int, 414>;
const int ProgRptReqs_BUYSIDE_EXPLICITLY_REQUESTS_STATUS_USING_STATUSREQUEST(1);
const int ProgRptReqs_SELLSIDE_PERIODICALLY_SENDS_STATUS_USING_LISTSTATUS_PERIOD_OPTIONALLY_SPECIFIED_IN_PROGRESSPERIOD(2);
const int ProgRptReqs_REAL_TIME_EXECUTION_REPORTS(3);
const size_t ProgRptReqs_realm_els(3);
//-------------------------------------------------------------------------------------------------
using ProgPeriodInterval = Field<int, 415>;
//-------------------------------------------------------------------------------------------------
using IncTaxInd = Field<int, 416>;
const int IncTaxInd_NET(1);
const int IncTaxInd_GROSS(2);
const size_t IncTaxInd_realm_els(2);
//-------------------------------------------------------------------------------------------------
using NumBidders = Field<int, 417>;
//-------------------------------------------------------------------------------------------------
using TradeType = Field<char, 418>;
const char TradeType_AGENCY('A');
const char TradeType_VWAP_GUARANTEE('G');
const char TradeType_GUARANTEED_CLOSE('J');
const char TradeType_RISK_TRADE('R');
const size_t TradeType_realm_els(4);
//-------------------------------------------------------------------------------------------------
using BasisPxType = Field<char, 419>;
const char BasisPxType_CLOSING_PRICE_AT_MORNING_SESSION('2');
const char BasisPxType_CLOSING_PRICE('3');
const char BasisPxType_CURRENT_PRICE('4');
const char BasisPxType_SQ('5');
const char BasisPxType_VWAP_THROUGH_A_DAY('6');
const char BasisPxType_VWAP_THROUGH_A_MORNING_SESSION('7');
const char BasisPxType_VWAP_THROUGH_AN_AFTERNOON_SESSION('8');
const char BasisPxType_VWAP_THROUGH_A_DAY_EXCEPT_YORI('9');
const char BasisPxType_VWAP_THROUGH_A_MORNING_SESSION_EXCEPT_YORI('A');
const char BasisPxType_VWAP_THROUGH_AN_AFTERNOON_SESSION_EXCEPT_YORI('B');
const char BasisPxType_STRIKE('C');
const char BasisPxType_OPEN('D');
const char BasisPxType_OTHERS('Z');
const size_t BasisPxType_realm_els(13);
//-------------------------------------------------------------------------------------------------
using NoBidComponents = Field<int, 420>;
//-------------------------------------------------------------------------------------------------
using Country = Field<f8String, 421>;
//-------------------------------------------------------------------------------------------------
using TotNoStrikes = Field<int, 422>;
//-------------------------------------------------------------------------------------------------
using PriceType = Field<int, 423>;
const int PriceType_PERCENTAGE(1);
const int PriceType_PER_SHARE(2);
const int PriceType_FIXED_AMOUNT(3);
const size_t PriceType_realm_els(3);
//-------------------------------------------------------------------------------------------------
using DayOrderQty = Field<Qty, 424>;
//-------------------------------------------------------------------------------------------------
using DayCumQty = Field<Qty, 425>;
//-------------------------------------------------------------------------------------------------
using DayAvgPx = Field<price, 426>;
//-------------------------------------------------------------------------------------------------
using GTBookingInst = Field<int, 427>;
const int GTBookingInst_BOOK_OUT_ALL_TRADES_ON_DAY_OF_EXECUTION(0);
const int GTBookingInst_ACCUMULATE_EXECUTIONS_UNTIL_ORDER_IS_FILLED_OR_EXPIRES(1);
const int GTBookingInst_ACCUMULATE_UNTIL_VERBALLY_NOTIFIED_OTHERWISE(2);
const size_t GTBookingInst_realm_els(3);
//-------------------------------------------------------------------------------------------------
using NoStrikes = Field<int, 428>;
//-------------------------------------------------------------------------------------------------
using ListStatusType = Field<int, 429>;
//-------------------------------------------------------------------------------------------------
using NetGrossInd = Field<int, 430>;
const int NetGrossInd_NET(1);
const int NetGrossInd_GROSS(2);
const size_t NetGrossInd_realm_els(2);
//-------------------------------------------------------------------------------------------------
using ListOrderStatus = Field<int, 431>;
//-------------------------------------------------------------------------------------------------
using ExpireDate = Field<LocalMktDate, 432>;
//-------------------------------------------------------------------------------------------------
using ListExecInstType = Field<char, 433>;
const char ListExecInstType_IMMEDIATE('1');
const char ListExecInstType_WAIT_FOR_EXECUTE_INSTRUCTION('2');
const size_t ListExecInstType_realm_els(2);
//-------------------------------------------------------------------------------------------------
using CxlRejResponseTo = Field<char, 434>;
const char CxlRejResponseTo_ORDER_CANCEL_REQUEST('1');
const char CxlRejResponseTo_ORDER_CANCEL_REPLACE_REQUEST('2');
const size_t CxlRejResponseTo_realm_els(2);
//-------------------------------------------------------------------------------------------------
using UnderlyingCouponRate = Field<fp_type, 435>;
//-------------------------------------------------------------------------------------------------
using UnderlyingContractMultiplier = Field<fp_type, 436>;
//-------------------------------------------------------------------------------------------------
using ContraTradeQty = Field<Qty, 437>;
//-------------------------------------------------------------------------------------------------
using ContraTradeTime = Field<UTCTimestamp, 438>;
//-------------------------------------------------------------------------------------------------
using ClearingFirm = Field<f8String, 439>;
//-------------------------------------------------------------------------------------------------
using ClearingAccount = Field<f8String, 440>;
//-------------------------------------------------------------------------------------------------
using LiquidityNumSecurities = Field<int, 441>;
//-------------------------------------------------------------------------------------------------
using MultiLegReportingType = Field<char, 442>;
const char MultiLegReportingType_SINGLE_SECURITY('1');
const char MultiLegReportingType_INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY('2');
const char MultiLegReportingType_MULTI_LEG_SECURITY('3');
const size_t MultiLegReportingType_realm_els(3);
//-------------------------------------------------------------------------------------------------
using StrikeTime = Field<UTCTimestamp, 443>;
//-------------------------------------------------------------------------------------------------
using ListStatusText = Field<f8String, 444>;
//-------------------------------------------------------------------------------------------------
using EncodedListStatusTextLen = Field<Length, 445>;
//-------------------------------------------------------------------------------------------------
using EncodedListStatusText = Field<data, 446>;
//-------------------------------------------------------------------------------------------------
using SERVER_BaseEntry = FieldTable;

} // namespace SERVER
} // namespace FIX8
#endif // FIX8_45534D5F74797065732E687070_
